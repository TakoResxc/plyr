{"version":3,"file":"plyr.js","sources":["src/js/storage.js","src/js/defaults.js","src/js/types.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\n// Get contents of local storage\nfunction get() {\n    const store = window.localStorage.getItem(this.config.storage.key);\n\n    if (utils.is.empty(store)) {\n        return {};\n    }\n\n    return JSON.parse(store);\n}\n\n// Save a value back to local storage\nfunction set(object) {\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return;\n    }\n\n    // Can only store objectst\n    if (!utils.is.object(object)) {\n        return;\n    }\n\n    // Get current storage\n    const storage = get.call(this);\n\n    // Update the working copy of the values\n    utils.extend(storage, object);\n\n    // Update storage\n    window.localStorage.setItem(this.config.storage.key, JSON.stringify(storage));\n}\n\n// Setup localStorage\nfunction setup() {\n    let value = null;\n    let storage = {};\n\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return storage;\n    }\n\n    // Clean up old volume\n    // https://github.com/sampotts/plyr/issues/171\n    window.localStorage.removeItem('plyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(this.config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n        // If value is a number, it's probably volume from an older\n        // version of this. See: https://github.com/sampotts/plyr/pull/313\n        // Update the key to be JSON\n        set({\n            volume: parseFloat(value),\n        });\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n        storage = JSON.parse(value);\n    }\n\n    return storage;\n}\n\nexport default { setup, set, get };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Display the media duration\n    displayDuration: true,\n\n    // Click video to play\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Pass a custom duration\n    duration: null,\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: ['hd2160', 'hd1440', 'hd1080', 'hd720', 'large', 'medium', 'small', 'tiny', 'default'],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        start: null,\n        end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        default: 1,\n        options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: ['captions', 'quality', 'speed', 'loop'],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        toggleMute: 'Toggle Mute',\n        toggleCaptions: 'Toggle Captions',\n        toggleFullscreen: 'Toggle Fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'captionchange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        muted: 'plyr--muted',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types\n// ==========================================================================\n\nconst types = {\n    embed: ['youtube', 'vimeo'],\n    html5: ['video', 'audio'],\n};\n\nexport default types;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.undefined(input) && Array.isArray(input);\n        },\n        nodeList(input) {\n            return !this.undefined(input) && input instanceof NodeList;\n        },\n        htmlElement(input) {\n            return !this.undefined(input) && input instanceof HTMLElement;\n        },\n        event(input) {\n            return !this.undefined(input) && input instanceof Event;\n        },\n        cue(input) {\n            return this.instanceOf(input, window.TextTrackCue) || this.instanceOf(input, window.VTTCue);\n        },\n        track(input) {\n            return (\n                !this.undefined(input) && (this.instanceOf(input, window.TextTrack) || typeof input.kind === 'string')\n            );\n        },\n        undefined(input) {\n            return input !== null && typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                input === null ||\n                typeof input === 'undefined' ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && input.length === 0) ||\n                (this.object(input) && Object.keys(input).length === 0)\n            );\n        },\n        getConstructor(input) {\n            if (input === null || typeof input === 'undefined') {\n                return null;\n            }\n\n            return input.constructor;\n        },\n        instanceOf(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url) {\n        // Check script is not already referenced\n        if (document.querySelectorAll(`script[src=\"${url}\"]`).length) {\n            return;\n        }\n\n        const tag = document.createElement('script');\n        tag.src = url;\n\n        const firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.htmlElement(element) || !utils.is.htmlElement(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.htmlElement(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.htmlElement(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches =\n            prototype.matches ||\n            prototype.webkitMatchesSelector ||\n            prototype.mozMatchesSelector ||\n            prototype.msMatchesSelector ||\n            match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.htmlElement(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(\n                    `.${this.config.classNames.tooltip}`\n                );\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const tabbables = utils.getElements.call(this, 'input:not([disabled]), button:not([disabled])');\n        const first = tabbables[0];\n        const last = tabbables[tabbables.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // If it is tab\n                if (event.which === 9 && this.fullscreen.active) {\n                    if (event.target === last && !event.shiftKey) {\n                        // Move focus to first element that can be tabbed if Shift isn't used\n                        event.preventDefault();\n                        first.focus();\n                    } else if (event.target === first && event.shiftKey) {\n                        // Move focus to last element that can be tabbed if Shift is used\n                        event.preventDefault();\n                        last.focus();\n                    }\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (elements === null || utils.is.undefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, properties) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, properties, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(target, state) {\n        // Bail if no target\n        if (!target) {\n            return null;\n        }\n\n        // Get state\n        const newState = utils.is.boolean(state) ? state : !target.getAttribute('aria-pressed');\n\n        // Set the attribute on target\n        target.setAttribute('aria-pressed', newState);\n\n        return newState;\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    extend(...objects) {\n        const { length } = objects;\n\n        // Bail if nothing to merge\n        if (!length) {\n            return null;\n        }\n\n        // Return first if specified but nothing to merge\n        if (length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        let destination = Array.prototype.shift.call(objects);\n        if (!utils.is.object(destination)) {\n            destination = {};\n        }\n\n        // Loop through all objects to merge\n        objects.forEach(source => {\n            if (!utils.is.object(source)) {\n                return;\n            }\n\n            Object.keys(source).forEach(property => {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    utils.extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            });\n        });\n\n        return destination;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Load an SVG sprite\n    loadSprite(url, id) {\n        if (typeof url !== 'string') {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = typeof id === 'string';\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            container.setAttribute('hidden', '');\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                }\n            }\n\n            // ReSharper disable once InconsistentNaming\n            const xhr = new XMLHttpRequest();\n\n            // XHR for Chrome/Firefox/Opera/Safari\n            if ('withCredentials' in xhr) {\n                xhr.open('GET', url, true);\n            } else {\n                return;\n            }\n\n            // Once loaded, inject to container and body\n            xhr.onload = () => {\n                if (support.storage) {\n                    window.localStorage.setItem(\n                        prefix + id,\n                        JSON.stringify({\n                            content: xhr.responseText,\n                        })\n                    );\n                }\n\n                updateSprite.call(container, xhr.responseText);\n            };\n\n            xhr.send();\n        }\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (type) {\n            case 'video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Local storage\n    // We can't assume if local storage is present that we can use it\n    storage: (() => {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        const test = '___test';\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    })(),\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.type === 'video') {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.type === 'audio') {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        ['webkit', 'o', 'moz', 'ms', 'khtml'].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled:\n        document.fullscreenEnabled ||\n        document.webkitFullscreenEnabled ||\n        document.mozFullScreenEnabled ||\n        document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.undefined(element) ? document.body : element;\n\n        return !prefix.length\n            ? target.requestFullScreen()\n            : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length\n            ? document.cancelFullScreen()\n            : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.type === 'audio' || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport storage from './storage';\nimport ui from './ui';\n\nconst listeners = {\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.displayDuration.call(this, event));\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.type === 'video' && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'waiting canplay seeked', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && this.type !== 'audio') {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!wrapper) {\n                return;\n            }\n\n            // Set cursor\n            wrapper.style.cursor = 'pointer';\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.media.paused) {\n                    return;\n                }\n\n                if (this.media.paused) {\n                    this.play();\n                } else if (this.media.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save speed to localStorage\n            storage.set.call(this, { speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save speed to localStorage\n            storage.set.call(this, { quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'captionchange', () => {\n            // Save speed to localStorage\n            storage.set.call(this, { language: this.language });\n        });\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save speed to localStorage\n            storage.set.call(this, { volume: this.volume });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save speed to localStorage\n            storage.set.call(this, { captions: this.captions.enabled });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat(['keyup', 'keydown']).join(' '), event => {\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = this.browser.isIE ? 'change' : 'input';\n        let last = null;\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Click play/pause helper\n        const togglePlay = () => {\n            const play = this.togglePlay();\n\n            // Determine which buttons\n            const target = this.elements.buttons[play ? 'pause' : 'play'];\n\n            // Transfer focus\n            if (utils.is.htmlElement(target)) {\n                target.focus();\n            }\n        };\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const held = pressed && code === last;\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.htmlElement(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!held) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!held) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!held) {\n                            this.muted = 'toggle';\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!held) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Play\n        utils.on(this.elements.buttons.play, 'click', event => proxy(event, 'play', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.pause, 'click', event => proxy(event, 'pause', togglePlay));\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = 'toggle';\n            })\n        );\n\n        // Captions\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airPlay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            // Show tab in menu\n            controls.showTab.call(this, event);\n\n            // Settings menu items - use event delegation as items are added/removed\n            // Settings - Language\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.toggleCaptions(true);\n                    this.language = event.target.value.toLowerCase();\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                // Settings - Quality\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                // Settings - Speed\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else if (utils.matches(event.target, this.config.selectors.buttons.loop)) {\n                // Settings - Looping\n                // TODO: use toggle buttons\n                proxy(event, 'loop', () => {\n                    // TODO: This should be done in the method itself I think\n                    // var value = event.target.getAttribute('data-loop__value') || event.target.getAttribute('data-loop__type');\n\n                    this.warn('Set loop');\n                });\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (this.browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event =>\n            controls.updateSeekTooltip.call(this, event)\n        );\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(\n                this.elements.container,\n                'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen',\n                event => {\n                    this.toggleControls(event);\n                }\n            );\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            // TODO: Check we need capture here\n            utils.on(\n                this.elements.controls,\n                'focus blur',\n                event => {\n                    this.toggleControls(event);\n                },\n                true\n            );\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.warn(`Basic support only for ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Set volume\n        this.volume = null;\n\n        // Set playback speed\n        this.speed = null;\n\n        // Set loop\n        // this.setLoop();\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Autoplay\n        if (this.config.autoplay) {\n            this.play();\n        }\n    },\n\n    // Show the duration on metadataloaded\n    displayDuration() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!this.elements.display.duration && this.config.displayDuration && this.media.paused) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.currentTime);\n        }\n\n        // If there's a duration element, update content\n        if (this.elements.display.duration) {\n            ui.updateTimeDisplay.call(this, this.duration, this.elements.display.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (this.supported.ui) {\n            if (utils.is.htmlElement(this.elements.buttons.play)) {\n                this.elements.buttons.play.setAttribute('aria-label', label);\n            }\n            if (utils.is.htmlElement(this.elements.buttons.playLarge)) {\n                this.elements.buttons.playLarge.setAttribute('aria-label', label);\n            }\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.htmlElement(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, !this.media.paused);\n\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.media.paused);\n\n        this.toggleControls(this.media.paused);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        // Update the <input type=\"range\"> if present\n        if (this.supported.ui) {\n            const value = this.muted ? 0 : this.volume;\n\n            if (utils.is.htmlElement(this.elements.inputs.volume)) {\n                ui.setRange.call(this, this.elements.inputs.volume, value);\n            }\n        }\n\n        // Toggle class if muted\n        utils.toggleClass(this.elements.container, this.config.classNames.muted, this.muted);\n\n        // Update checkbox for mute state\n        if (this.supported.ui && utils.is.htmlElement(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted);\n        }\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = event.type === 'waiting';\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value) {\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        // Default to 0\n        const value = !utils.is.undefined(input) ? input : 0;\n        const progress = !utils.is.undefined(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.htmlElement(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.htmlElement(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(value, element) {\n        // Bail if there's no duration display\n        if (!utils.is.htmlElement(element)) {\n            return null;\n        }\n\n        // Fallback to 0\n        const time = !Number.isNaN(value) ? value : 0;\n\n        let secs = parseInt(time % 60, 10);\n        let mins = parseInt((time / 60) % 60, 10);\n        const hours = parseInt((time / 60 / 60) % 60, 10);\n\n        // Do we need to display hours?\n        const displayHours = parseInt((this.duration / 60 / 60) % 60, 10) > 0;\n\n        // Ensure it's two digits. For example, 03 rather than 3.\n        secs = `0${secs}`.slice(-2);\n        mins = `0${mins}`.slice(-2);\n\n        // Generate display\n        const display = `${(displayHours ? `${hours}:` : '') + mins}:${secs}`;\n\n        // Render\n        element.textContent = display;\n\n        // Return for looping\n        return display;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Duration\n        ui.updateTimeDisplay.call(this, this.currentTime, this.elements.display.currentTime);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!this.browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.htmlElement(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.htmlElement(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([selector, styles].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (this.browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `${iconPath}-${type}`);\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type) {\n        let text = this.config.i18n[type];\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        return utils.createElement(\n            'span',\n            {\n                class: this.config.classNames.hidden,\n            },\n            text\n        );\n    },\n\n    // Create a badge\n    createBadge(text) {\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n        let iconDefault;\n        let iconToggled;\n        let labelKey;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.indexOf(this.config.classNames.control) === -1) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'mute':\n                labelKey = 'toggleMute';\n                iconDefault = 'volume';\n                iconToggled = 'muted';\n                break;\n\n            case 'captions':\n                labelKey = 'toggleCaptions';\n                iconDefault = 'captions-off';\n                iconToggled = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                labelKey = 'toggleFullscreen';\n                iconDefault = 'enter-fullscreen';\n                iconToggled = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class = 'plyr__play-large';\n                type = 'play';\n                labelKey = 'play';\n                iconDefault = 'play';\n                break;\n\n            default:\n                labelKey = type;\n                iconDefault = type;\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        // Add toggle icon if needed\n        if (utils.is.string(iconToggled)) {\n            button.appendChild(\n                controls.createIcon.call(this, iconToggled, {\n                    class: `icon--${iconToggled}`,\n                })\n            );\n        }\n\n        button.appendChild(controls.createIcon.call(this, iconDefault));\n        button.appendChild(controls.createLabel.call(this, labelKey));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('span', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(\n            utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00')\n        );\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.htmlElement(this.elements.inputs.seek) ||\n            !utils.is.htmlElement(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = this.elements.display.seekTooltip.style.left.replace('%', '');\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.duration / 100 * percent, this.elements.display.seekTooltip);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        if (utils.is.htmlElement(tab)) {\n            if (toggle) {\n                tab.removeAttribute('hidden');\n            } else {\n                tab.setAttribute('hidden', '');\n            }\n        }\n\n        if (utils.is.htmlElement(pane)) {\n            if (toggle) {\n                pane.removeAttribute('hidden');\n            } else {\n                pane.setAttribute('hidden', '');\n            }\n        }\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.type === 'youtube';\n        controls.toggleTab.call(this, 'quality', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.quality), {\n                    type: 'radio',\n                    name: 'plyr-quality',\n                    value: quality,\n                })\n            );\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(controls.getLabel.call(this, 'quality', quality)));\n\n            const badge = getBadge(quality);\n            if (utils.is.htmlElement(badge)) {\n                label.appendChild(badge);\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'quality', list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.language;\n\n                if (!this.captions.enabled) {\n                    value = '';\n                }\n\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.htmlElement(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // Check it\n        target.checked = true;\n\n        // Find the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n    },\n\n    // Set the looping options\n    setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.loop.removeAttribute('hidden');\n        this.elements.settings.panes.loop.removeAttribute('hidden');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    },\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || utils.is.empty(this.captions.tracks)) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.enabled) {\n            return this.captions.currentTrack.label;\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.captions.tracks);\n        controls.toggleTab.call(this, 'captions', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = Array.from(this.captions.tracks).map(track => ({\n            language: track.language,\n            badge: true,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.language), {\n                    type: 'radio',\n                    name: 'plyr-language',\n                    value: track.language,\n                })\n            );\n\n            if (track.language.toLowerCase() === this.captions.language.toLowerCase()) {\n                radio.checked = true;\n            }\n\n            label.appendChild(radio);\n            label.appendChild(document.createTextNode(track.label || track.language));\n\n            if (track.badge) {\n                label.appendChild(controls.createBadge.call(this, track.language.toUpperCase()));\n            }\n\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'captions', list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.speed = options.filter(speed => this.config.speed.options.includes(speed));\n        } else {\n            this.options.speed = this.config.speed.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, 'speed', toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        this.elements.settings.tabs.speed.removeAttribute('hidden');\n        this.elements.settings.panes.speed.removeAttribute('hidden');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            const item = utils.createElement('li');\n\n            const label = utils.createElement('label', {\n                class: this.config.classNames.control,\n            });\n\n            const radio = utils.createElement(\n                'input',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs.speed), {\n                    type: 'radio',\n                    name: 'plyr-speed',\n                    value: speed,\n                })\n            );\n\n            label.appendChild(radio);\n            label.insertAdjacentHTML('beforeend', controls.getLabel.call(this, 'speed', speed));\n            item.appendChild(label);\n            list.appendChild(item);\n        });\n\n        controls.updateSetting.call(this, 'speed', list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : form && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = form && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (button) {\n            button.setAttribute('aria-expanded', show);\n        }\n        if (form) {\n            form.setAttribute('aria-hidden', !show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.htmlElement(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || !['width', 'height'].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement(\n            'div',\n            utils.getAttributesFromSelector(this.config.selectors.controls.wrapper)\n        );\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement(\n                'span',\n                utils.getAttributesFromSelector(this.config.selectors.progress)\n            );\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('span', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.buttons.playLarge = controls.createButton.call(this, 'play-large');\n            this.elements.container.appendChild(this.elements.buttons.playLarge);\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const iconUrl = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (iconUrl.absolute) {\n                this.log(`AJAX loading absolute SVG sprite ${this.browser.isIE ? '(due to IE)' : ''}`);\n                utils.loadSprite(iconUrl.url, 'sprite-plyr');\n            } else {\n                this.log('Sprite will be used as external resource directly');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.htmlElement(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.htmlElement(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.htmlElement(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport storage from './storage';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        if (!utils.is.empty(storage.get.call(this).language)) {\n            this.captions.language = storage.get.call(this).language;\n        } else if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.enabled)) {\n            if (!utils.is.empty(storage.get.call(this).language)) {\n                this.captions.enabled = storage.get.call(this).captions;\n            } else {\n                this.captions.enabled = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!['video', 'vimeo'].includes(this.type) || (this.type === 'video' && !support.textTracks)) {\n            this.captions.tracks = null;\n\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.htmlElement(this.elements.captions)) {\n            this.elements.captions = utils.createElement(\n                'div',\n                utils.getAttributesFromSelector(this.config.selectors.captions)\n            );\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get tracks from HTML5\n        if (this.type === 'video') {\n            this.captions.tracks = this.media.textTracks;\n        }\n\n        // Set the class hook\n        utils.toggleClass(\n            this.elements.container,\n            this.config.classNames.captions.enabled,\n            !utils.is.empty(this.captions.tracks)\n        );\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(this.captions.tracks)) {\n            return;\n        }\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Get a track\n        const setCurrentTrack = () => {\n            // Reset by default\n            this.captions.currentTrack = null;\n\n            // Filter doesn't seem to work for a TextTrackList :-(\n            Array.from(this.captions.tracks).forEach(track => {\n                if (track.language === this.captions.language.toLowerCase()) {\n                    this.captions.currentTrack = track;\n                }\n            });\n        };\n\n        // Get current track\n        setCurrentTrack();\n\n        // If we couldn't get the requested language, revert to default\n        if (!utils.is.track(this.captions.currentTrack)) {\n            const { language } = this.config.captions;\n\n            // Reset to default\n            // We don't update user storage as the selected language could become available\n            this.captions.language = language;\n\n            // Get fallback track\n            setCurrentTrack();\n\n            // If no match, disable captions\n            if (!utils.is.track(this.captions.currentTrack)) {\n                this.toggleCaptions(false);\n            }\n\n            controls.updateSetting.call(this, 'captions');\n        }\n\n        // Setup HTML5 track rendering\n        if (this.type === 'video') {\n            // Turn off native caption rendering to avoid double captions\n            Array.from(this.captions.tracks).forEach(track => {\n                // Remove previous bindings (if we've changed source or language)\n                utils.off(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Hide captions\n                track.mode = 'hidden';\n            });\n\n            // Check if suported kind\n            const supported =\n                this.captions.currentTrack && ['captions', 'subtitles'].includes(this.captions.currentTrack.kind);\n\n            if (utils.is.track(this.captions.currentTrack) && supported) {\n                utils.on(this.captions.currentTrack, 'cuechange', event => captions.setCue.call(this, event));\n\n                // If we change the active track while a cue is already displayed we need to update it\n                if (this.captions.currentTrack.activeCues && this.captions.currentTrack.activeCues.length > 0) {\n                    captions.setCue.call(this, this.captions.currentTrack);\n                }\n            }\n        } else if (this.type === 'vimeo' && this.captions.active) {\n            this.embed.enableTextTrack(this.captions.language);\n        }\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.set.call(this, active.getCueAsHTML());\n        } else {\n            captions.set.call(this);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    set(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.htmlElement(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.undefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.htmlElement(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = storage.get.call(this).captions;\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions is flaky on YouTube\n                // cc_load_policy: (this.captions.active ? 1 : 0),\n                // cc_lang_pref: 'en',\n            },\n            events: {\n                onError(event) {\n                    utils.dispatchEvent.call(player, player.media, 'error', true, {\n                        code: event.data,\n                        embed: event.target,\n                    });\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n                    player.media.muted = instance.isMuted();\n                    player.media.currentTime = 0;\n\n                    // Seeking\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Volume\n                    let volume = instance.getVolume() / 100;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return instance.isMuted();\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : false;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Get available speeds\n                    if (player.config.controls.includes('settings') && player.config.settings.includes('speed')) {\n                        controls.setSpeedMenu.call(player, instance.getAvailablePlaybackRates());\n                    }\n\n                    // Set title\n                    player.config.title = instance.getVideoData().title;\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.config.loop.active) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n\n                                break;\n                            }\n\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'ended');\n\n                            break;\n\n                        case 1:\n                            player.media.paused = false;\n\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n\n                            player.media.seeking = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'play');\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.type}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.type));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api);\n            // Wait for load\n            const vimeoTimer = window.setInterval(() => {\n                if (utils.is.object(window.Vimeo)) {\n                    window.clearInterval(vimeoTimer);\n                    vimeo.ready.call(this);\n                }\n            }, 50);\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: this.config.loop.active,\n            autoplay: this.config.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: 0,\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(this.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/this.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play();\n            player.media.paused = false;\n        };\n        player.media.pause = () => {\n            player.embed.pause();\n            player.media.paused = true;\n        };\n        player.media.stop = () => {\n            player.embed.stop();\n            player.media.paused = true;\n        };\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    this.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        // Not currently supported in Vimeo\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return null;\n            },\n            set() {},\n        });\n\n        // Volume\n        let { volume } = player.media;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                volume = input;\n                player.embed.setVolume(input);\n                utils.dispatchEvent.call(player, player.media, 'volumechange');\n            },\n        });\n\n        // Muted\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return volume === 0;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n                player.volume = toggle ? 0 : player.config.volume;\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(this, this.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.captions.tracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.set.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.htmlElement(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'play');\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        this.embed.on('timeupdate', data => {\n            this.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(this, this.media, 'timeupdate');\n        });\n\n        this.embed.on('progress', data => {\n            this.media.buffered = data.percent;\n            utils.dispatchEvent.call(this, this.media, 'progress');\n\n            if (parseInt(data.percent, 10) === 1) {\n                // Trigger event\n                utils.dispatchEvent.call(this, this.media, 'canplaythrough');\n            }\n        });\n\n        this.embed.on('seeked', () => {\n            this.media.seeking = false;\n            utils.dispatchEvent.call(this, this.media, 'seeked');\n            utils.dispatchEvent.call(this, this.media, 'play');\n        });\n\n        this.embed.on('ended', () => {\n            this.media.paused = true;\n            utils.dispatchEvent.call(this, this.media, 'ended');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.pip.supported,\n                support.pip && this.type === 'video'\n            );\n\n            // Check for airplay support\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.airplay.supported,\n                support.airplay && this.isHTML5\n            );\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, this.browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (['video', 'youtube', 'vimeo'].includes(this.type)) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        // Embeds\n        if (this.isEmbed) {\n            switch (this.type) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        ui.setTitle.call(this);\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport types from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.htmlElement(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in input) {\n                    this.type = input.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (this.type === 'video') {\n                        const firstSource = input.sources[0];\n\n                        if ('type' in firstSource && types.embed.includes(firstSource.type)) {\n                            this.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                this.supported = support.check(this.type, this.config.inline);\n\n                // Create new markup\n                switch (this.type) {\n                    case 'video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hooks\n                utils.toggleClass(\n                    this.elements.container,\n                    this.config.classNames.captions.active,\n                    this.supported.ui && this.captions.enabled\n                );\n\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './defaults';\nimport types from './types';\nimport support from './support';\nimport utils from './utils';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport media from './media';\nimport storage from './storage';\nimport source from './source';\nimport ui from './ui';\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if (\n            (window.jQuery && this.media instanceof jQuery) ||\n            utils.is.nodeList(this.media) ||\n            utils.is.array(this.media)\n        ) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr'));\n                } catch (e) {\n                    return null;\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        // TODO: captions.enabled should be in config?\n        this.captions = {\n            enabled: null,\n            tracks: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        this.log = () => {};\n        this.warn = () => {};\n        this.error = () => {};\n        if (this.config.debug && 'console' in window) {\n            this.log = console.log; // eslint-disable-line\n            this.warn = console.warn; // eslint-disable-line\n            this.error = console.error; // eslint-disable-line\n            this.log('Debugging enabled');\n        }\n\n        // Log config options and support\n        this.log('Config', this.config);\n        this.log('Support', support);\n\n        // We need an element to setup\n        if (this.media === null || utils.is.undefined(this.media) || !utils.is.htmlElement(this.media)) {\n            this.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = this.media.getAttribute('data-type');\n                this.embedId = this.media.getAttribute('data-video-id');\n\n                if (utils.is.empty(this.type)) {\n                    this.error('Setup failed: embed type missing');\n                    return;\n                }\n\n                if (utils.is.empty(this.embedId)) {\n                    this.error('Setup failed: video id missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute('data-type');\n                this.media.removeAttribute('data-video-id');\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n\n                if (this.media.getAttribute('crossorigin') !== null) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.getAttribute('autoplay') !== null) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.getAttribute('playsinline') !== null) {\n                    this.config.inline = true;\n                }\n                if (this.media.getAttribute('muted') !== null) {\n                    this.config.muted = true;\n                }\n                if (this.media.getAttribute('loop') !== null) {\n                    this.config.loop.active = true;\n                }\n                break;\n\n            default:\n                this.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Sniff out the browser\n        this.browser = utils.getBrowser();\n\n        // Load saved settings from localStorage\n        storage.setup.call(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // API\n    // ---------------------------------------\n\n    get isHTML5() {\n        return types.html5.includes(this.type);\n    }\n    get isEmbed() {\n        return types.embed.includes(this.type);\n    }\n\n    // Play\n    play() {\n        if ('play' in this.media) {\n            this.media.play();\n        }\n\n        // Allow chaining\n        return this;\n    }\n\n    // Pause\n    pause() {\n        if ('pause' in this.media) {\n            this.media.pause();\n        }\n\n        // Allow chaining\n        return this;\n    }\n\n    // Toggle playback\n    togglePlay(toggle) {\n        // True toggle if nothing passed\n        if ((!utils.is.boolean(toggle) && this.media.paused) || toggle) {\n            return this.play();\n        }\n\n        return this.pause();\n    }\n\n    // Stop\n    stop() {\n        return this.restart().pause();\n    }\n\n    // Restart\n    restart() {\n        this.currentTime = 0;\n        return this;\n    }\n\n    // Rewind\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    // Fast forward\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    // Seek to time\n    // The input parameter can be an event or a number\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    // Duration\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    // Volume\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            ({ volume } = storage.get.call(this));\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // Toggle muted state\n        if (volume === 0) {\n            this.muted = true;\n        }\n    }\n\n    get volume() {\n        return this.media.volume;\n    }\n\n    // Increase volume\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.media.volume;\n\n        return this.setVolume(volume + utils.is.number(step) ? step : 1);\n    }\n\n    // Decrease volume\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.media.volume;\n\n        return this.setVolume(volume - utils.is.number(step) ? step : 1);\n    }\n\n    // Toggle mute\n    set muted(mute) {\n        // If the method is called without parameter, toggle based on current value\n        const toggle = utils.is.boolean(mute) ? mute : !this.media.muted;\n\n        // Set button state\n        utils.toggleState(this.elements.buttons.mute, toggle);\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    get muted() {\n        return this.media.muted;\n    }\n\n    // Playback speed\n    set speed(input) {\n        // Load speed from storage or default value\n        let speed = utils.is.number(input)\n            ? input\n            : parseFloat(storage.get.call(this).speed || this.speed.selected || this.config.speed.default);\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    // Set playback quality\n    set quality(input) {\n        // Load speed from storage or default value\n        const quality = utils.is.string(input)\n            ? input\n            : parseFloat(storage.get.call(this).quality || this.config.quality.selected);\n\n        if (!this.config.quality.options.includes(quality)) {\n            this.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Set media speed\n        switch (this.type) {\n            case 'youtube':\n                this.utils.dispatchEvent.call(this, this.media, 'qualityrequested', false, {\n                    quality,\n                });\n\n                this.embed.setPlaybackQuality(quality);\n\n                break;\n\n            default:\n                this.warn('Quality options are only available for YouTube');\n                break;\n        }\n    }\n\n    get quality() {\n        // Set media speed\n        switch (this.type) {\n            case 'youtube':\n                return this.embed.getPlaybackQuality();\n\n            default:\n                this.warn('Quality options are only available for YouTube');\n                return null;\n        }\n    }\n\n    // Toggle loop\n    // TODO: Finish logic\n    // TODO: Set the indicator on load as user may pass loop as config\n    /* loop(input) {\n        // Set default to be a true toggle\n        const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        }\n\n        // Allow chaining\n        return this;\n    } */\n\n    // Media source\n    set src(input) {\n        source.change.call(this, input);\n    }\n\n    get src() {\n        return this.media.currentSrc;\n    }\n\n    // Poster image\n    set poster(input) {\n        if (this.type !== 'video') {\n            this.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    get poster() {\n        if (this.type !== 'video') {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    // Toggle captions\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.htmlElement(this.elements.buttons.captions)) {\n            return this;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input)\n            ? input\n            : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.enabled === show) {\n            return this;\n        }\n\n        // Set global\n        this.captions.enabled = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.enabled);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.enabled);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.enabled ? 'captionsenabled' : 'captionsdisabled');\n\n        // Allow chaining\n        return this;\n    }\n\n    // Caption language\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.captions.language === language) {\n            return;\n        }\n\n        // Reset UI\n        this.toggleCaptions(true);\n\n        // Update config\n        this.captions.language = language;\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'captionchange');\n\n        // Clear caption\n        captions.set.call(this);\n\n        // Re-run setup\n        captions.setup.call(this);\n    }\n\n    get language() {\n        return this.captions.language;\n    }\n\n    // Toggle fullscreen\n    // Requires user input event\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            // If it's a fullscreen change event, update the UI\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    // Request full screen\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    // Bail from fullscreen\n                    fullscreen.cancelFullScreen();\n                }\n\n                // Check if we're actually full screen (it could fail)\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n\n                return this;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(\n                this.elements.container,\n                this.config.classNames.fullscreen.fallback,\n                this.fullscreen.active\n            );\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n\n        return this;\n    }\n\n    // Toggle picture-in-picture\n    // TODO: update player with state, support, enabled\n    // TODO: detect outside changes\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    // Trigger airplay\n    // TODO: update player with state, support, enabled\n    airplay() {\n        // Bail if no support\n        if (!support.airplay) {\n            return this;\n        }\n\n        // Show dialog\n        this.media.webkitShowPlaybackTargetPicker();\n\n        return this;\n    }\n\n    // Show the player controls in fullscreen mode\n    toggleControls(toggle) {\n        const player = this;\n\n        // We need controls of course...\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return player;\n        }\n\n        // Don't hide if config says not to, it's audio, or not ready or loading\n        if (!this.supported.ui || !this.config.hideControls || this.type === 'audio') {\n            return player;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n        const loading = utils.hasClass(this.elements.container, this.config.classNames.loading);\n\n        // Default to false if no boolean\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = ['mousemove', 'touchstart', 'mouseenter', 'focus'].includes(toggle.type);\n\n                // Delay hiding on move events\n                if (['mousemove', 'touchmove'].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focus') {\n                    delay = 3000;\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer every movement\n        window.clearTimeout(this.timers.hover);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.media.paused || loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.media.paused || loading) {\n                return player;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || !this.media.paused) {\n            this.timers.hover = window.setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n\n        return this;\n    }\n\n    // Event listeners\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n\n        return this;\n    }\n\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n\n        return this;\n    }\n\n    // Check for support\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    // Destroy an instance\n    // Event listeners are removed when elements are removed\n    // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                utils.removeElement(this.elements.captions);\n                utils.removeElement(this.elements.controls);\n                utils.removeElement(this.elements.wrapper);\n\n                // Clear for GC\n                this.elements.captions = null;\n                this.elements.controls = null;\n                this.elements.wrapper = null;\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.htmlElement(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (this.type) {\n            case 'youtube':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Plyr;\n"],"names":["get","store","window","localStorage","getItem","this","config","storage","key","utils","is","empty","JSON","parse","set","object","support","enabled","call","extend","setItem","stringify","defaults","navigator","language","split","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","undefined","Array","isArray","NodeList","HTMLElement","Event","instanceOf","TextTrackCue","VTTCue","TextTrack","kind","string","array","nodeList","length","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","querySelectorAll","tag","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","sibling","nextSibling","appendChild","htmlElement","removeChild","target","type","attributes","text","setAttributes","textContent","childNodes","lastChild","setAttribute","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","value","charAt","class","id","toggle","contains","classList","prototype","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","container","querySelector","controls","getElement","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","warn","toggleNativeControls","focused","activeElement","body","tabbables","first","last","on","event","which","_this","active","shiftKey","preventDefault","focus","callback","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","properties","CustomEvent","assign","Plyr","dispatchEvent","state","newState","getAttribute","current","max","toFixed","objects","destination","shift","source","property","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","innerHTML","firstChild","innerText","updateSprite","data","hasId","cached","content","xhr","XMLHttpRequest","open","onload","responseText","send","find","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","removeItem","function","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","canPlayType","supported","defineProperty","addEventListener","range","transitionEnd","matchMedia","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","log","toggleClass","toggleState","trapFocus","setup","parseFloat","listeners","timeUpdate","displayDuration","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","cursor","hideControls","touch","paused","ended","disableContextMenu","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this2","defaultPrevented","togglePlay","getKeyCode","keyCode","handleKey","code","pressed","held","getFocusElement","editable","stopPropagation","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","setLoop","keyboard","global","tabFocus","setTimeout","airPlay","toggleMenu","form","showTab","toLowerCase","loop","isWebkit","updateRangeFill","updateSeekTooltip","toggleControls","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","eventType","uiSupported","isHTML5","removeAttribute","removeElement","inject","ready","autoplay","updateTimeDisplay","label","i18n","title","playLarge","isEmbed","iframe","frameTitle","playing","stopped","setRange","loading","timers","nodeValue","getPercentage","buffered","end","setProgress","time","secs","parseInt","mins","hours","displayHours","slice","seeking","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","setAttributeNS","hidden","badge","menu","buttonType","attr","button","iconDefault","iconToggled","labelKey","control","getAttributesFromSelector","createIcon","createLabel","suffix","played","tooltips","percent","clientRect","getBoundingClientRect","visible","width","pageX","left","hasClass","setting","tab","tabs","pane","panes","list","filter","toggleTab","emptyElement","getBadge","createBadge","item","radio","createTextNode","getLabel","getLanguage","default","checked","option","textTracks","tracks","none","currentTrack","disabled","track","toUpperCase","unshift","_this3","_this4","insertAdjacentHTML","show","isMenuItem","isButton","clone","position","opacity","name","scrollWidth","height","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this5","back","setSpeedMenu","loadSprite","seekTime","create","findElements","labels","_this6","setCaptionsMenu","insertAfter","setCurrentTrack","setCue","mode","activeCues","embed","enableTextTrack","cue","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","generateId","YT","loadScript","urls","onYouTubeReadyCallbacks","push","onYouTubeIframeAPIReady","player","Player","location","hostname","href","instance","getPlaybackQuality","playbackRate","getPlaybackRate","playVideo","pauseVideo","stop","stopVideo","getDuration","isMuted","getCurrentTime","seekTo","setPlaybackRate","getVolume","setVolume","getVideoUrl","getAvailablePlaybackRates","getVideoData","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","vimeoTimer","params","buildUrlParameters","parseVimeoId","setCurrentTime","currentSrc","then","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","setTitle","blankVideo","insertElement","attribute","sources","cancelRequests","destroy","firstSource","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","debug","console","plyr","original","tagName","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","clearTimeout","mime","soft","done","replaceChild","unload","html5","targetTime","fauxDuration","realDuration","selected","setPlaybackQuality","change","states","webkitPresentationMode"],"mappings":"uLAIA,SAISA,QACCC,EAAQC,OAAOC,aAAaC,QAAQC,KAAKC,OAAOC,QAAQC,YAE1DC,EAAMC,GAAGC,MAAMV,MAIZW,KAAKC,MAAMZ,GAItB,SAASa,EAAIC,MAEJC,EAAQT,SAAYF,KAAKC,OAAOC,QAAQU,SAKxCR,EAAMC,GAAGK,OAAOA,QAKfR,EAAUP,EAAIkB,KAAKb,QAGnBc,OAAOZ,EAASQ,UAGfZ,aAAaiB,QAAQf,KAAKC,OAAOC,QAAQC,IAAKI,KAAKS,UAAUd,KCpCxE,IAAMe,YAEO,QAGF,UAGA,YAGG,WAGA,UAGF,SACD,mBAGU,eAGJ,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,iDAGG,gDAGF,sBAIG,mBACC,SAAU,SAAU,SAAU,QAAS,QAAS,SAAU,QAAS,OAAQ,0BAK7E,QACD,SACF,qBAKI,WACC,GAAK,IAAM,EAAG,KAAM,IAAK,KAAM,uBAKhC,UACD,uBAKE,QACJ,qBAKE,WACEpB,OAAOqB,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,qBAKD,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAEO,WAAY,UAAW,QAAS,sBAI9B,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,oBACI,6BACI,mCACE,+BACN,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,6BAMD,uDAGA,uDAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,gBACA,iBACA,gBACA,sBAIA,gBACA,wCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,4BACE,qBACH,oBACG,wBACA,sBACF,sBACE,sBACF,sBACE,uBACD,6BACM,4BACP,uBACE,6BACI,4BAEF,0BACA,iCAGE,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAEF,oBCpSZC,UACM,UAAW,gBACX,QAAS,UCAfjB,uBAGSkB,UACItB,KAAKuB,eAAeD,KAAWE,wBAEnCF,UACItB,KAAKuB,eAAeD,KAAWG,SAAWA,OAAOC,MAAMJ,oBAE3DA,UACItB,KAAKuB,eAAeD,KAAWK,yBAElCL,UACGtB,KAAKuB,eAAeD,KAAWM,2BAEjCN,UACEtB,KAAKuB,eAAeD,KAAWO,yBAEpCP,UACMtB,KAAK8B,UAAUR,IAAUS,MAAMC,QAAQV,sBAE1CA,UACGtB,KAAK8B,UAAUR,IAAUA,aAAiBW,+BAE1CX,UACAtB,KAAK8B,UAAUR,IAAUA,aAAiBY,4BAEhDZ,UACMtB,KAAK8B,UAAUR,IAAUA,aAAiBa,oBAElDb,UACOtB,KAAKoC,WAAWd,EAAOzB,OAAOwC,eAAiBrC,KAAKoC,WAAWd,EAAOzB,OAAOyC,wBAElFhB,UAEGtB,KAAK8B,UAAUR,KAAWtB,KAAKoC,WAAWd,EAAOzB,OAAO0C,YAAoC,iBAAfjB,EAAMkB,0BAGlFlB,UACW,OAAVA,QAAmC,IAAVA,kBAE9BA,UAEY,OAAVA,QACiB,IAAVA,IACLtB,KAAKyC,OAAOnB,IAAUtB,KAAK0C,MAAMpB,IAAUtB,KAAK2C,SAASrB,KAA4B,IAAjBA,EAAMsB,QAC3E5C,KAAKU,OAAOY,IAAwC,IAA9BE,OAAOqB,KAAKvB,GAAOsB,gCAGnCtB,UACG,OAAVA,QAAmC,IAAVA,EAClB,KAGJA,EAAMwB,iCAENxB,EAAOwB,UACPlB,QAAQN,GAASwB,GAAexB,aAAiBwB,yCAOxBC,SAASC,sBAC/B,qBAAsBD,SAASE,gBAAgBC,QAAU,OAAOC,KAAKjC,UAAUkC,oBAC/E,kBAAkBD,KAAKjC,UAAUmC,gBACpC,uBAAuBF,KAAKjC,UAAUmC,gCAK1CC,OAEHP,SAASQ,gCAAgCD,QAASV,YAIhDY,EAAMT,SAASU,cAAc,YAC/BC,IAAMJ,MAEJK,EAAiBZ,SAASa,qBAAqB,UAAU,KAChDC,WAAWC,aAAaN,EAAKG,yBAIrCI,UACGA,MAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,yCAMzBrE,OAAOsE,OAAStE,OAAOuE,IAChC,MAAOC,UACE,kBAKVC,EAAUC,OAELC,EAAUF,EAAS1B,OAAS0B,GAAYA,SAIxCG,KAAKD,GACNE,UACAC,QAAQ,SAACC,EAASC,OACTC,EAAQD,EAAQ,EAAIN,EAAQQ,WAAU,GAAQR,EAG9CS,EAASJ,EAAQf,WACjBoB,EAAUL,EAAQM,cAIlBC,YAAYP,GAKdK,IACOnB,aAAagB,EAAOG,KAEpBE,YAAYL,6BAMrBF,UACLxE,EAAMC,GAAG+E,YAAYR,IAAaxE,EAAMC,GAAG+E,YAAYR,EAAQf,eAI5DA,WAAWwB,YAAYT,GAExBA,GALI,2BASHA,EAASU,KACVzB,WAAWC,aAAac,EAASU,EAAOJ,qCAIrCK,EAAMC,EAAYC,OAEtBb,EAAU7B,SAASU,cAAc8B,UAGnCnF,EAAMC,GAAGK,OAAO8E,MACVE,cAAcd,EAASY,GAI7BpF,EAAMC,GAAGoC,OAAOgD,OACRE,YAAcF,GAInBb,0BAIGW,EAAMP,EAAQQ,EAAYC,KAE7BN,YAAY/E,EAAMqD,cAAc8B,EAAMC,EAAYC,2BAIhDb,WACHhC,EAAWgC,EAAQgB,WAAnBhD,OAECA,EAAS,KACJyC,YAAYT,EAAQiB,cAClB,0BAKJjB,EAASY,UACZ3C,KAAK2C,GAAYb,QAAQ,cACpBmB,aAAa3F,EAAKqF,EAAWrF,0CAKnB4F,EAAKC,OAMtB5F,EAAMC,GAAGoC,OAAOsD,IAAQ3F,EAAMC,GAAGC,MAAMyF,gBAItCP,KACAS,EAAWD,WAEb5E,MAAM,KAAKuD,QAAQ,gBAEbuB,EAAWC,EAAEC,OACbC,EAAYH,EAASI,QAAQ,IAAK,IAIlCC,EAHWL,EAASI,QAAQ,SAAU,IAGrBlF,MAAM,KACvBjB,EAAMoG,EAAM,GACZC,EAAQD,EAAM3D,OAAS,EAAI2D,EAAM,GAAGD,QAAQ,QAAS,IAAM,UAGnDJ,EAASO,OAAO,QAGrB,IAEGrG,EAAMC,GAAGK,OAAOuF,IAAa7F,EAAMC,GAAGoC,OAAOwD,EAASS,WAC7CA,WAAaL,KAGfK,MAAQL,YAGlB,MAEUM,GAAKT,EAASI,QAAQ,IAAK,cAGrC,MAEUnG,GAAOqG,KASvBhB,wBAICZ,EAASyB,EAAWO,MACxBxG,EAAMC,GAAG+E,YAAYR,GAAU,KACzBiC,EAAWjC,EAAQkC,UAAUD,SAASR,YAEpCS,UAAUF,EAAS,MAAQ,UAAUP,GAErCO,IAAWC,IAAeD,GAAUC,SAGzC,wBAIFjC,EAASyB,UACPjG,EAAMC,GAAG+E,YAAYR,IAAYA,EAAQkC,UAAUD,SAASR,qBAI/DzB,EAASsB,OACPa,GAAcC,iBAMdC,EACFF,EAAUE,SACVF,EAAUG,uBACVH,EAAUI,oBACVJ,EAAUK,qCAPHrF,MAAM0C,KAAK1B,SAASQ,iBAAiB2C,IAAWmB,SAASrH,cAU7DiH,EAAQpG,KAAK+D,EAASsB,yBAIrBA,UACDlG,KAAKsE,SAASgD,UAAU/D,iBAAiB2C,wBAIzCA,UACAlG,KAAKsE,SAASgD,UAAUC,cAAcrB,4CAOpC5B,SAASkD,SAAWpH,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUF,SAASjD,cAG/ED,SAASqD,cACJvH,EAAMwH,YAAY/G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQE,YAC1DzH,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQG,eACxD1H,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQI,gBAC3D3H,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQK,gBACzD5H,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQM,cAC7D7H,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQO,UAC3D9H,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQQ,aACtD/H,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQS,kBACzDhI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQU,mBAC1DjI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQW,qBACxDlI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUC,QAAQY,kBAIrEjE,SAASkE,SAAWpI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUc,eAGtElE,SAASmE,aACJrI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUe,OAAOC,aACvDtI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUe,OAAOE,cAIhErE,SAASsE,gBACFxI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUkB,QAAQC,iBACxDzI,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUkB,QAAQE,sBACvD1I,EAAMqH,WAAW5G,KAAKb,KAAMA,KAAKC,OAAOyH,UAAUkB,QAAQG,cAIvE3I,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASkE,iBAC9BlE,SAASsE,QAAQI,YAAchJ,KAAKsE,SAASkE,SAASjB,kBACnDvH,KAAKC,OAAOgJ,WAAWC,WAI5B,EACT,MAAOC,eAEAC,KAAK,kEAAmED,QAGxEE,sBAAqB,IAEnB,mCAMPC,EAAUvG,SAASwG,uBAElBD,GAAWA,IAAYvG,SAASyG,KAGvBzG,SAASwE,cAAc,UAFvB,sCAURkC,EAAYrJ,EAAMwH,YAAY/G,KAAKb,KAAM,iDACzC0J,EAAQD,EAAU,GAClBE,EAAOF,EAAUA,EAAU7G,OAAS,KAEpCgH,GACF5J,KAAKsE,SAASgD,UACd,UACA,YAEwB,IAAhBuC,EAAMC,OAAeC,EAAKxB,WAAWyB,SACjCH,EAAMvE,SAAWqE,GAASE,EAAMI,SAIzBJ,EAAMvE,SAAWoE,GAASG,EAAMI,aAEjCC,mBACDC,YALCD,mBACAC,YAQlB,4BAKO7F,EAAUuF,EAAOO,EAAUxD,EAAQyD,EAASC,MAEtC,OAAbhG,IAAqBlE,EAAMC,GAAGyB,UAAUwC,MAKxClE,EAAMC,GAAGsC,SAAS2B,SAEZG,KAAKH,GAAUK,QAAQ,YACrBC,aAAmB2F,QACbC,eAAe3J,KAAK,KAAM+D,EAASiF,EAAOO,EAAUxD,EAAQyD,EAASC,cAQjFG,EAASZ,EAAMzI,MAAM,KAIvBsJ,IAAUtK,EAAMC,GAAGsK,QAAQL,IAAWA,EAGtC3J,EAAQiK,+BAGKxK,EAAMC,GAAGsK,QAAQN,IAAWA,YAE5BjK,EAAMC,GAAGsK,QAAQL,IAAWA,MAKtC3F,QAAQ,cACFiC,EAAS,mBAAqB,uBAAuBrB,EAAM6E,EAAUM,mBAKnF9F,EAAS6F,EAAQL,EAAUC,EAASC,KAC7BE,eAAe5F,EAAS6F,EAAQL,GAAU,EAAMC,EAASC,iBAI/D1F,EAAS6F,EAAQL,EAAUC,EAASC,KAC9BE,eAAe5F,EAAS6F,EAAQL,GAAU,EAAOC,EAASC,2BAItD1F,EAASW,EAAMsF,EAASC,MAE7BlG,GAAYW,OAKXsE,EAAQ,IAAIkB,YAAYxF,aACjBnF,EAAMC,GAAGsK,QAAQE,IAAWA,SAC7BrJ,OAAOwJ,UAAWF,QAChB9K,gBAAgBiL,KAAOjL,KAAO,WAKpCkL,cAAcrB,0BAKdvE,EAAQ6F,OAEX7F,SACM,SAIL8F,EAAWhL,EAAMC,GAAGsK,QAAQQ,GAASA,GAAS7F,EAAO+F,aAAa,yBAGjEvF,aAAa,eAAgBsF,GAE7BA,0BAIGE,EAASC,UACH,IAAZD,GAAyB,IAARC,GAAa9J,OAAOC,MAAM4J,IAAY7J,OAAOC,MAAM6J,GAC7D,GAEHD,EAAUC,EAAM,KAAKC,QAAQ,iDAM/BC,6CACE7I,EAAW6I,EAAX7I,WAGHA,SACM,QAII,IAAXA,SACO6I,EAAQ,OAIfC,EAAc3J,MAAMgF,UAAU4E,MAAM9K,KAAK4K,UACxCrL,EAAMC,GAAGK,OAAOgL,aAKb/G,QAAQ,YACPvE,EAAMC,GAAGK,OAAOkL,WAId/I,KAAK+I,GAAQjH,QAAQ,YACpBiH,EAAOC,IAAaD,EAAOC,GAAU/I,aAAe8I,EAAOC,GAAU/I,cAAgBtB,UACzEqK,GAAYH,EAAYG,SAC9B/K,OAAO4K,EAAYG,GAAWD,EAAOC,OAE/BA,GAAYD,EAAOC,OAKpCH,2BAIIpI,UAEJA,EAAIwI,MADG,gEACYC,OAAOC,GAAK1I,yBAI7BA,MACLlD,EAAMC,GAAG4L,OAAOxK,OAAO6B,WAChBA,SAIJA,EAAIwI,MADG,mCACYC,OAAOC,GAAK1I,+BAIvBhC,UACVlB,EAAMC,GAAGK,OAAOY,GAIdE,OAAOqB,KAAKvB,GACd4K,IAAI,mBAAUC,mBAAmBhM,OAAQgM,mBAAmB7K,EAAMnB,MAClEiM,KAAK,KALC,uBASLR,OACAS,EAAWtJ,SAASuJ,yBACpB1H,EAAU7B,SAASU,cAAc,gBAC9B0B,YAAYP,KACb2H,UAAYX,EACbS,EAASG,WAAWC,+BAIpBnJ,EAAKqD,YASH+F,EAAaC,QAEbJ,UAAYI,WAGRnD,KAAK1F,aAAa9D,KAAM+C,SAASyG,KAAK5D,WAAW,OAb3C,iBAARtC,OAKLsJ,EAAsB,iBAAPjG,MAYhBiG,IAAU7J,SAASQ,qBAAqBoD,GAAM/D,OAAQ,KAEjD0E,EAAYvE,SAASU,cAAc,YAC/BqC,aAAa,SAAU,IAE7B8G,KACU9G,aAAa,KAAMa,GAI7BhG,EAAQT,QAAS,KACX2M,EAAShN,OAAOC,aAAaC,QAxB5B,SAwB6C4G,MAC9B,OAAXkG,EAEG,KACJF,EAAOpM,KAAKC,MAAMqM,KACXhM,KAAKyG,EAAWqF,EAAKG,cAKpCC,EAAM,IAAIC,oBAGZ,oBAAqBD,YACjBE,KAAK,MAAO3J,GAAK,KAMrB4J,OAAS,WACLvM,EAAQT,gBACDJ,aAAaiB,QA9CjB,SA+CU4F,EACTpG,KAAKS,mBACQ+L,EAAII,kBAKZtM,KAAKyG,EAAWyF,EAAII,iBAGjCC,wBAKI,eACNxI,EAAU7B,SAASU,cAAc,QASjC8B,EAAO/D,OAAOqB,uBANE,oCACH,4BACF,2CACD,kBAGiBwK,KAAK,wBAAkCvL,IAAzB8C,EAAQ1B,MAAM2G,WAEtC,iBAATtE,GAAoBA,EAZtB,ICnnBd5E,SAEK,gBAAiBoC,SAASU,cAAc,eACxC,gBAAiBV,SAASU,cAAc,wBAIzC8B,EAAM+H,OACJC,GAAM,EACNC,GAAK,EACHC,EAAUrN,EAAMsN,aAChBC,EAAcF,EAAQG,UAAYN,GAAU3M,EAAQ2M,cAElD/H,OACC,aACK5E,EAAQkN,QACFlN,EAAQmN,cAAgBL,EAAQG,UAAYD,aAGvD,aACKhN,EAAQoN,QACFpN,EAAQmN,qBAGnB,aACK,IACDnN,EAAQmN,cAAgBL,EAAQG,UAAYD,aAGhD,WACK,IACDhN,EAAQmN,aAAeL,EAAQG,4BAI9BjN,EAAQoN,OAASpN,EAAQkN,QACnBlN,EAAQmN,uCAWtB,gBACA,iBAAkBjO,eACb,oBAOAC,aAAaiB,QAFX,UAAA,kBAGFjB,aAAakO,WAHX,YAIF,EACT,MAAO3J,UACE,GAbL,QAoBUjE,EAAMsN,aACNE,UAAYxN,EAAMC,GAAG4N,SAAS7N,EAAMqD,cAAc,SAASyK,mCAKtE9N,EAAMC,GAAG4N,SAASpO,OAAOsO,8CAI1B,gBAAiBpL,SAASU,cAAc,uBAK3C8B,OACO6I,EAAUpO,KAAVoO,cAIChO,EAAMC,GAAG4N,SAASG,EAAMC,oBAClB,KAIO,UAAdrO,KAAKuF,YACGA,OACC,oBACM6I,EAAMC,YAAY,oCAAoC/H,QAAQ,KAAM,QAE1E,mBACM8H,EAAMC,YAAY,8CAA8C/H,QAAQ,KAAM,QAEpF,mBACM8H,EAAMC,YAAY,8BAA8B/H,QAAQ,KAAM,mBAG9D,OAEZ,GAAkB,UAAdtG,KAAKuF,YACJA,OACC,oBACM6I,EAAMC,YAAY,eAAe/H,QAAQ,KAAM,QAErD,mBACM8H,EAAMC,YAAY,8BAA8B/H,QAAQ,KAAM,QAEpE,mBACM8H,EAAMC,YAAY,yBAAyB/H,QAAQ,KAAM,mBAGzD,GAGrB,MAAOjC,UACE,SAIJ,cAIC,eAAgBtB,SAASU,cAAc,0BAKhC,eAEX6K,GAAY,UAEN5D,EAAUlJ,OAAO+M,kBAAmB,oCAEtB,EACL,eAGRC,iBAAiB,OAAQ,KAAM9D,GACxC,MAAOrG,WAIFiK,EAfQ,cAmBN,eACHG,EAAQ1L,SAASU,cAAc,kBAC/B8B,KAAO,QACS,UAAfkJ,EAAMlJ,KAHJ,SAQN,iBAAkBxC,SAASE,6BAGG,IAAxB7C,EAAMsO,4BAIJ,eAAgB7O,QAAUA,OAAO8O,WAAW,4BAA4B1H,SCzKrFlD,EAAU,eACRyC,GAAQ,SAERpG,EAAMC,GAAG4N,SAASlL,SAAS6L,oBACnB,IAGP,SAAU,IAAK,MAAO,KAAM,SAASC,KAAK,mBACnCzO,EAAMC,GAAG4N,SAASlL,SAAY+L,0BACtBA,GACD,MACA1O,EAAMC,GAAG4N,SAASlL,SAASgM,oBAAqBhM,SAASiM,yBAExD,MACD,KAOZxI,EArBK,GAyBV+B,oBAMExF,SAASkM,mBACTlM,SAASmM,yBACTnM,SAASoM,sBACTpM,SAASiM,8BAIS,OAAXjL,EAAkB,qBAA0BA,2CAG1Ca,OACJ2D,EAAW3H,eACL,MAGL0E,EAASlF,EAAMC,GAAGyB,UAAU8C,GAAW7B,SAASyG,KAAO5E,SAErDb,OACC,UACMhB,SAASqM,oBAAsB9J,MAErC,aACMvC,SAASsM,uBAAyB/J,iBAGlCvC,SAAYgB,yBAA+BuB,+BAK5CV,OACT2D,EAAW3H,eACL,MAGL0E,EAASlF,EAAMC,GAAGyB,UAAU8C,GAAW7B,SAASyG,KAAO5E,SAErDb,EAAOnB,OAET0C,EAAOvB,GAAqB,OAAXA,EAAkB,oBAAsB,wBADzDuB,EAAOgK,yDAMR/G,EAAW3H,UAIRmD,EAAOnB,OAETG,SAASgB,GAAqB,OAAXA,EAAkB,iBAAmB,uBADxDhB,SAAS6L,+CAMVrG,EAAW3H,QAIRmD,EAAOnB,OAAsCG,SAAYgB,uBAAzChB,SAASqM,kBAHtB,0BAQNpP,KAAKsO,UAAUd,IAAoB,UAAdxN,KAAKuF,MAAqBvF,KAAKC,OAAOsI,WAAW3H,aAKrE2O,EAAgBhH,EAAW3H,QAE7B2O,GAAkBvP,KAAKC,OAAOsI,WAAWiH,WAAapP,EAAMqP,gBACvDC,KAAOH,EAAgB,SAAW,qCAGjCI,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWV,WAAW3H,SAAS,SAEjF8O,IAAI,kDAIT1P,KAAKsE,SAASqD,SAAW3H,KAAKsE,SAASqD,QAAQY,cACzCqH,YAAY5P,KAAKsE,SAASqD,QAAQY,YAAY,KAIlDsH,UAAUhP,KAAKb,YLlDZ8P,MAjCjB,eACQtJ,EAAQ,KACRtG,YAGCS,EAAQT,SAAYF,KAAKC,OAAOC,QAAQU,gBAMtCd,aAAakO,WAAW,kBAGvBnO,OAAOC,aAAaC,QAAQC,KAAKC,OAAOC,QAAQC,QAI7C,gBAAgBgD,KAAKqD,aAKhBuJ,WAAWvJ,OAIbjG,KAAKC,MAAMgG,IAGlBtG,GAxBIA,GA2BSO,MAAKd,OM/DvBqQ,oCAIQpG,GAAG5J,KAAKoO,MAAO,qBAAsB,mBAASZ,EAAGyC,WAAWpP,OAAWgJ,OAGvED,GAAG5J,KAAKoO,MAAO,gCAAiC,mBAASZ,EAAG0C,gBAAgBrP,OAAWgJ,OAGvFD,GAAG5J,KAAKoO,MAAO,QAAS,WAER,UAAdrE,EAAKxE,MAAoBwE,EAAK9J,OAAOkQ,oBAEhCpI,YAGAqG,MAAMgC,YAKbxG,GAAG5J,KAAKoO,MAAO,mBAAoB,mBAASZ,EAAG6C,eAAexP,OAAWgJ,OAGzED,GAAG5J,KAAKoO,MAAO,eAAgB,mBAASZ,EAAG8C,aAAazP,OAAWgJ,OAGnED,GAAG5J,KAAKoO,MAAO,mBAAoB,mBAASZ,EAAG+C,aAAa1P,OAAWgJ,OAGvED,GAAG5J,KAAKoO,MAAO,yBAA0B,mBAASZ,EAAGgD,aAAa3P,OAAWgJ,KAG/E7J,KAAKsO,UAAUd,IAAMxN,KAAKC,OAAOwQ,aAA6B,UAAdzQ,KAAKuF,KAAkB,KAEjEhB,EAAUnE,EAAMqH,WAAW5G,KAAKb,SAAUA,KAAKC,OAAOgJ,WAAW4E,WAGlEtJ,WAKGrB,MAAMwN,OAAS,YAGjB9G,GAAGrF,EAAS,QAAS,WAEnBwF,EAAK9J,OAAO0Q,cAAgBhQ,EAAQiQ,QAAU7G,EAAKqE,MAAMyC,SAIzD9G,EAAKqE,MAAMyC,SACNhJ,OACEkC,EAAKqE,MAAM0C,SACb/I,YACAF,UAEAC,WAMb9H,KAAKC,OAAO8Q,sBACNnH,GACF5J,KAAKoO,MACL,cACA,cACUlE,mBAEV,KAKFN,GAAG5J,KAAKoO,MAAO,aAAc,aAEtB4C,cAAcnQ,OAAW,WAG1BJ,IAAII,QAAaoQ,MAAOlH,EAAKkH,YAInCrH,GAAG5J,KAAKoO,MAAO,gBAAiB,aAEzB4C,cAAcnQ,OAAW,aAG1BJ,IAAII,QAAaqQ,QAASnH,EAAKmH,cAIrCtH,GAAG5J,KAAKoO,MAAO,gBAAiB,aAE1B3N,IAAII,QAAaM,SAAU4I,EAAK5I,eAItCyI,GAAG5J,KAAKoO,MAAO,eAAgB,aAEzB3N,IAAII,QAAa8H,OAAQoB,EAAKpB,aAIpCiB,GAAG5J,KAAKoO,MAAO,mCAAoC,aAE5C4C,cAAcnQ,OAAW,cAG1BJ,IAAII,QAAayH,SAAUyB,EAAKzB,SAAS1H,cAK/CgJ,GAAG5J,KAAKoO,MAAOpO,KAAKC,OAAOwK,OAAO0G,QAAQ,QAAS,YAAY/E,KAAK,KAAM,cACtElB,cAAcrK,OAAWkJ,EAAKzF,SAASgD,UAAWuC,EAAMtE,MAAM,qCAOlE6L,EAAapR,KAAKyN,QAAQ4D,KAAO,SAAW,QAC9C1H,EAAO,KAGL2H,EAAQ,SAACzH,EAAO0H,EAAYC,OACxBC,EAAgBC,EAAKzR,OAAO+P,UAAUuB,GAGxCnR,EAAMC,GAAG4N,SAASwD,MACJ5Q,OAAWgJ,IAIxBA,EAAM8H,kBAAoBvR,EAAMC,GAAG4N,SAASuD,MAC9B3Q,OAAWgJ,IAK5B+H,EAAa,eACT/J,EAAO6J,EAAKE,aAGZtM,EAASoM,EAAKpN,SAASqD,QAAQE,EAAO,QAAU,QAGlDzH,EAAMC,GAAG+E,YAAYE,MACd6E,SAKT0H,EAAa,mBAAUhI,EAAMiI,QAAUjI,EAAMiI,QAAUjI,EAAMC,OAG7DiI,EAAY,gBACRC,EAAOH,EAAWhI,GAClBoI,EAAyB,YAAfpI,EAAMtE,KAChB2M,EAAOD,GAAWD,IAASrI,KAI5BvJ,EAAMC,GAAG4L,OAAO+F,OAYjBC,EAAS,KAEH/H,GACF,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAMEZ,EAAUlJ,EAAM+R,qBAClB/R,EAAMC,GAAG+E,YAAYkE,IAAYlJ,EAAM6G,QAAQqC,EAASoI,EAAKzR,OAAOyH,UAAU0K,wBAK9ElI,EAAe7C,SAAS2K,OAClB9H,mBACAmI,mBAGFL,QACC,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,GAEIE,MAzDRnJ,YAAc2I,EAAK5I,SAAW,IAAMkJ,EAAO,gBA8DvC,QACA,GAEIE,KACIN,wBAIR,KAEIU,eAAe,eAGnB,KAEIC,eAAe,eAGnB,GAEIL,MACIM,MAAQ,qBAIhB,KAEIvK,qBAGJ,KAEID,oBAGJ,KAEIyK,8BAGJ,GAEIP,KACIQ,4BAIR,KACIC,QAAQ,oBAGZ,KACIA,qBAGJ,KACIA,QAAQ,QAShBpK,EAAW3H,SAAW8Q,EAAKnJ,WAAWyB,QAAmB,KAATgI,KAC5CS,qBAIFT,SAEA,OAKXhS,KAAKC,OAAO2S,SAAStJ,UACfM,GAAG5J,KAAKsE,SAASgD,UAAW,gBAAiByK,GAAW,GACvD/R,KAAKC,OAAO2S,SAASC,UACtBjJ,GAAG/J,OAAQ,gBAAiBkS,GAAW,KAK3CnI,GAAG5J,KAAKsE,SAASgD,UAAW,WAAY,cACpCqI,YAAY9F,EAAMvE,OAAQoM,EAAKzR,OAAOgJ,WAAW6J,UAAU,OAI/DlJ,GAAG5J,KAAKsE,SAASgD,UAAW,UAAW,YACnB,IAAlBuC,EAAMiI,gBAMHiB,WAAW,aACRpD,YAAYvP,EAAM+R,kBAAmBT,EAAKzR,OAAOgJ,WAAW6J,UAAU,IAC7E,OAIDlJ,GAAG5J,KAAKsE,SAASqD,QAAQE,KAAM,QAAS,mBAASyJ,EAAMzH,EAAO,OAAQ+H,OAGtEhI,GAAG5J,KAAKsE,SAASqD,QAAQG,MAAO,QAAS,mBAASwJ,EAAMzH,EAAO,QAAS+H,OAGxEhI,GAAG5J,KAAKsE,SAASqD,QAAQI,QAAS,QAAS,mBAC7CuJ,EAAMzH,EAAO,UAAW,aACf9B,gBAKP6B,GAAG5J,KAAKsE,SAASqD,QAAQK,OAAQ,QAAS,mBAC5CsJ,EAAMzH,EAAO,SAAU,aACd7B,eAKP4B,GAAG5J,KAAKsE,SAASqD,QAAQM,QAAS,QAAS,mBAC7CqJ,EAAMzH,EAAO,UAAW,aACf5B,gBAKP2B,GAAG5J,KAAKsE,SAASqD,QAAQO,KAAM,QAAS,mBAC1CoJ,EAAMzH,EAAO,OAAQ,aACZ2I,MAAQ,eAKf5I,GAAG5J,KAAKsE,SAASqD,QAAQW,SAAU,QAAS,mBAC9CgJ,EAAMzH,EAAO,WAAY,aAChB6I,uBAKP9I,GAAG5J,KAAKsE,SAASqD,QAAQY,WAAY,QAAS,mBAChD+I,EAAMzH,EAAO,aAAc,aAClB4I,yBAKP7I,GAAG5J,KAAKsE,SAASqD,QAAQQ,IAAK,QAAS,mBACzCmJ,EAAMzH,EAAO,MAAO,aACX1B,IAAM,eAKbyB,GAAG5J,KAAKsE,SAASqD,QAAQS,QAAS,QAAS,mBAC7CkJ,EAAMzH,EAAO,UAAW,aACfmJ,gBAKPpJ,GAAG5J,KAAKsE,SAASqD,QAAQU,SAAU,QAAS,cACrC4K,WAAWpS,OAAWgJ,OAI7BD,GAAG7G,SAASE,gBAAiB,QAAS,cAC/BgQ,WAAWpS,OAAWgJ,OAI7BD,GAAG5J,KAAKsE,SAAS+D,SAAS6K,KAAM,QAAS,cAElCC,QAAQtS,OAAWgJ,GAIxBzJ,EAAM6G,QAAQ4C,EAAMvE,OAAQoM,EAAKzR,OAAOyH,UAAUe,OAAOtH,YACnD0I,EAAO,WAAY,aAChB6I,gBAAe,KACfvR,SAAW0I,EAAMvE,OAAOkB,MAAM4M,gBAEhChT,EAAM6G,QAAQ4C,EAAMvE,OAAQoM,EAAKzR,OAAOyH,UAAUe,OAAOyI,WAE1DrH,EAAO,UAAW,aACfqH,QAAUrH,EAAMvE,OAAOkB,QAEzBpG,EAAM6G,QAAQ4C,EAAMvE,OAAQoM,EAAKzR,OAAOyH,UAAUe,OAAOwI,SAE1DpH,EAAO,QAAS,aACboH,MAAQlB,WAAWlG,EAAMvE,OAAOkB,SAElCpG,EAAM6G,QAAQ4C,EAAMvE,OAAQoM,EAAKzR,OAAOyH,UAAUC,QAAQ0L,SAG3DxJ,EAAO,OAAQ,aAIZT,KAAK,kBAMhBQ,GAAG5J,KAAKsE,SAASmE,OAAOC,KAAM0I,EAAY,mBAC5CE,EAAMzH,EAAO,OAAQ,aACZd,YAAcc,EAAMvE,OAAOkB,MAAQqD,EAAMvE,OAAOiG,IAAMmG,EAAK5I,eAKlEc,GAAG5J,KAAKsE,SAASmE,OAAOE,OAAQyI,EAAY,mBAC9CE,EAAMzH,EAAO,SAAU,aACdlB,OAASkB,EAAMvE,OAAOkB,UAK/BxG,KAAKyN,QAAQ6F,YACP1J,GAAGxJ,EAAMwH,YAAY/G,KAAKb,KAAM,uBAAwB,QAAS,cAC1DuT,gBAAgB1S,OAAWgJ,EAAMvE,YAK5CsE,GAAG5J,KAAKsE,SAASkE,SAAU,kCAAmC,mBAChEhB,EAASgM,kBAAkB3S,OAAWgJ,KAItC7J,KAAKC,OAAO0Q,iBAEN/G,GACF5J,KAAKsE,SAASgD,UACd,4FACA,cACSmM,eAAe5J,OAKtBD,GAAG5J,KAAKsE,SAASkD,SAAU,wBAAyB,cACjDlD,SAASkD,SAASkM,MAAuB,eAAf7J,EAAMtE,SAInCqE,GAAG5J,KAAKsE,SAASkD,SAAU,oDAAqD,cAC7ElD,SAASkD,SAASyK,SAAW,YAAa,cAAc5K,SAASwC,EAAMtE,UAK1EqE,GACF5J,KAAKsE,SAASkD,SACd,aACA,cACSiM,eAAe5J,KAExB,MAKFD,GACF5J,KAAKsE,SAASmE,OAAOE,OACrB,QACA,mBACI2I,EAAMzH,EAAO,SAAU,eAGb8J,EAAW9J,EAAM+J,kCAEnBC,EAAY,GAGZhK,EAAMiK,OAAS,GAAKjK,EAAMkK,OAAS,KAC/BJ,KACKpB,eANA,QAOQ,MAERD,eATA,OAUO,KAKhBzI,EAAMiK,OAAS,GAAKjK,EAAMkK,OAAS,KAC/BJ,KACKrB,eAjBA,OAkBO,MAEPC,eApBA,QAqBQ,KAKF,IAAdsB,GAAmBnC,EAAKtD,MAAMzF,OAAS,IAAsB,IAAfkL,GAAoBnC,EAAKtD,MAAMzF,OAAS,MACjFuB,qBAGlB,GAIA3B,EAAW3H,WACLgJ,GAAG7G,SAAUwF,EAAWyL,UAAW,cAChCvB,iBAAiB5I,OCriBhC2D,6BAEQmC,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOyH,UAAUJ,UAAUhB,QAAQ,IAAK,KAAK,KACvFqJ,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWgL,YAAajU,KAAKsO,UAAUd,mCAI7E5G,GACbA,GAAU5G,KAAKkU,aACV9F,MAAMtI,aAAa,WAAY,SAE/BsI,MAAM+F,gBAAgB,mCAQrB/F,MAAMvN,KAAKb,OAGhBA,KAAKsO,UAAUd,eACXpE,+BAA+BpJ,KAAKuF,QAGnC6O,cAAcvT,KAAKb,KAAM,cAGzBoU,cAAcvT,KAAKb,KAAM,uBAG5BqJ,qBAAqBxI,KAAKb,MAAM,GAOlCI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASkD,cAE3B6M,OAAOxT,KAAKb,QAGXwH,SAAS3G,KAAKb,OAIvBI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASkD,cAKrC6B,qBAAqBxI,KAAKb,QAGlB8P,MAAMjP,KAAKb,QAGb8P,MAAMjP,KAAKb,WAGf2I,OAAS,UAGTsI,MAAQ,OAMVhB,WAAWpP,KAAKb,QAGhBuQ,aAAa1P,KAAKb,WAEhBsU,OAAQ,IAGPpJ,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAO,SAGvCpO,KAAKC,OAAOsU,eACP1M,oCAMJ7H,KAAKsO,UAAUd,MAKfxN,KAAKsE,SAASsE,QAAQE,UAAY9I,KAAKC,OAAOiQ,iBAAmBlQ,KAAKoO,MAAMyC,UAC1E2D,kBAAkB3T,KAAKb,KAAMA,KAAK8I,SAAU9I,KAAKsE,SAASsE,QAAQG,aAIrE/I,KAAKsE,SAASsE,QAAQE,YACnB0L,kBAAkB3T,KAAKb,KAAMA,KAAK8I,SAAU9I,KAAKsE,SAASsE,QAAQE,YAIhE0K,kBAAkB3S,KAAKb,gCAM5ByU,EAAQzU,KAAKC,OAAOyU,KAAK7M,QAGzBzH,EAAMC,GAAGoC,OAAOzC,KAAKC,OAAO0U,SAAWvU,EAAMC,GAAGC,MAAMN,KAAKC,OAAO0U,iBACpD3U,KAAKC,OAAO0U,WAGrBrQ,SAASgD,UAAUxB,aAAa,aAAc9F,KAAKC,OAAO0U,QAI/D3U,KAAKsO,UAAUd,KACXpN,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASqD,QAAQE,YACtCvD,SAASqD,QAAQE,KAAK/B,aAAa,aAAc2O,GAEtDrU,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASqD,QAAQiN,iBACtCtQ,SAASqD,QAAQiN,UAAU9O,aAAa,aAAc2O,IAM/DzU,KAAK6U,QAAS,KACRC,EAAS1U,EAAMqH,WAAW5G,KAAKb,KAAM,cAEtCI,EAAMC,GAAG+E,YAAY0P,cAKpBH,EAASvU,EAAMC,GAAGC,MAAMN,KAAKC,OAAO0U,OAA6B,QAApB3U,KAAKC,OAAO0U,QAExD7O,aAAa,QAAS9F,KAAKC,OAAOyU,KAAKK,WAAWzO,QAAQ,UAAWqO,gCAM1EhF,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAW+L,SAAUhV,KAAKoO,MAAMyC,UAEjFlB,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWgM,QAASjV,KAAKoO,MAAMyC,aAEjF4C,eAAezT,KAAKoO,MAAMyC,oCAM3B7Q,KAAKsO,UAAUd,GAAI,KACbhH,EAAQxG,KAAKwS,MAAQ,EAAIxS,KAAK2I,OAEhCvI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASmE,OAAOE,WACvCuM,SAASrU,KAAKb,KAAMA,KAAKsE,SAASmE,OAAOE,OAAQnC,KAKtDmJ,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWuJ,MAAOxS,KAAKwS,OAG1ExS,KAAKsO,UAAUd,IAAMpN,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASqD,QAAQO,SAC1D0H,YAAY5P,KAAKsE,SAASqD,QAAQO,KAAMlI,KAAKwS,8BAK9C3I,mBACJsL,QAAyB,YAAftL,EAAMtE,kBAGRvF,KAAKoV,OAAOD,cAGpBC,OAAOD,QAAUpC,WAAW,aAEvBpD,YAAY5F,EAAKzF,SAASgD,UAAWyC,EAAK9J,OAAOgJ,WAAWkM,QAASpL,EAAKoL,WAG3E1B,eAAe1J,EAAKoL,UAC1BnV,KAAKmV,QAAU,IAAM,sBAInB7P,EAAQkB,GACRpG,EAAMC,GAAG+E,YAAYE,OAInBkB,MAAQA,IAGN+M,gBAAgB1S,KAAKb,KAAMsF,0BAI5BA,EAAQhE,OAEVkF,EAASpG,EAAMC,GAAGyB,UAAUR,GAAiB,EAARA,EACrCkH,EAAYpI,EAAMC,GAAGyB,UAAUwD,GAAmBtF,KAAKsE,SAASsE,QAAQC,OAA/BvD,KAG3ClF,EAAMC,GAAG+E,YAAYoD,GAAW,GACvBhC,MAAQA,MAGXiO,EAAQjM,EAAS5E,qBAAqB,QAAQ,GAChDxD,EAAMC,GAAG+E,YAAYqP,OACf7O,WAAW,GAAGyP,UAAY7O,6BAM7BqD,iBACN7J,KAAKsO,UAAUd,QAIhBhH,EAAQ,KAERqD,SACQA,EAAMtE,UAEL,iBACA,YACOnF,EAAMkV,cAActV,KAAK+I,YAAa/I,KAAK8I,UAGhC,eAAfe,EAAMtE,QACH2P,SAASrU,KAAKb,KAAMA,KAAKsE,SAASmE,OAAOC,KAAMlC,aAMrD,cACA,aACQ,eACG+O,EAAa7D,EAAKtD,MAAlBmH,gBAEJA,GAAYA,EAAS3S,OAEdxC,EAAMkV,cAAcC,EAASC,IAAI,GAAI9D,EAAK5I,UAC1C1I,EAAMC,GAAG4L,OAAOsJ,GAEL,IAAXA,EAGJ,EAXF,KAcNE,YAAY5U,KAAKb,KAAMA,KAAKsE,SAASsE,QAAQC,OAAQrC,iCAWtDA,EAAO5B,OAEhBxE,EAAMC,GAAG+E,YAAYR,UACf,SAIL8Q,EAAQjU,OAAOC,MAAM8E,GAAiB,EAARA,EAEhCmP,EAAOC,SAASF,EAAO,GAAI,IAC3BG,EAAOD,SAAUF,EAAO,GAAM,GAAI,IAChCI,EAAQF,SAAUF,EAAO,GAAK,GAAM,GAAI,IAGxCK,EAAeH,SAAU5V,KAAK8I,SAAW,GAAK,GAAM,GAAI,IAAM,SAGzD6M,GAAOK,OAAO,UACdH,GAAOG,OAAO,OAGnBpN,GAAcmN,EAAkBD,MAAW,IAAMD,MAAQF,WAGvDhQ,YAAciD,EAGfA,uBAIAiB,KAEJ2K,kBAAkB3T,KAAKb,KAAMA,KAAK+I,YAAa/I,KAAKsE,SAASsE,QAAQG,aAGpEc,GAAwB,eAAfA,EAAMtE,MAAyBvF,KAAKoO,MAAM6H,WAKpD5F,eAAexP,KAAKb,KAAM6J,KC3T/BrC,4BAEclC,MAEPtF,KAAKyN,QAAQ6F,cAKZ7E,EAAQrO,EAAMC,GAAGwJ,MAAMvE,GAAUA,EAAOA,OAASA,KAGlDlF,EAAMC,GAAG+E,YAAYqJ,IAAyC,UAA/BA,EAAMpD,aAAa,SAKlDjL,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAAS4R,mBAC/B5R,SAAS4R,WAAa9V,EAAMqD,cAAc,cAC1Ca,SAASgD,UAAUnC,YAAYnF,KAAKsE,SAAS4R,iBAGhDA,EAAalW,KAAKsE,SAAS4R,WAAWC,MACtCC,EAAa3H,EAAMjI,MAAQiI,EAAMlD,IAAM,IACvCrF,MAAeuI,EAAM9H,qCACrB0P,gEAAuED,oBAA4BA,SAGnGvR,EAAQ9C,MAAM0C,KAAKyR,EAAWI,OAAOC,UAAU,mBAAQC,EAAKC,eAAiBvQ,KAGpE,IAAXrB,KACW6R,WAAW7R,KAIf8R,YAAYzQ,EAAUmQ,GAAQjK,KAAK,0CAMrCpM,KAAKC,OAAO2W,iBACiC,IAAxC5W,KAAKC,OAAO2W,QAAQC,QAAQ,SAAkB7W,KAAKyN,QAAQ4D,OAASxR,OAAOiX,oCAKlFvR,EAAMC,OAEPoR,EAAUpP,EAASuP,WAAWlW,KAAKb,MACnCgX,GAAeJ,EAAQK,SAAyB,GAAdL,EAAQtT,SAAYtD,KAAKC,OAAOiX,WAGlEC,EAAOpU,SAASqU,gBALJ,6BAK+B,SAC3C1R,cACFyR,EACA/W,EAAMU,OAAO0E,QACH,sBAKR6R,EAAMtU,SAASqU,gBAdH,6BAc8B,gBAC5CE,eAAe,+BAAgC,aAAiBN,MAAYzR,KAG3EJ,YAAYkS,GAEVF,wBAIC5R,OACJE,EAAOzF,KAAKC,OAAOyU,KAAKnP,UAEpBA,OACC,QACM,gBAGN,YACM,iBAORnF,EAAMqD,cACT,cAEWzD,KAAKC,OAAOgJ,WAAWsO,QAElC9R,yBAKIA,OACF+R,EAAQpX,EAAMqD,cAAc,cACvBzD,KAAKC,OAAOgJ,WAAWwO,KAAKjR,iBAGjCrB,YACF/E,EAAMqD,cACF,cAEWzD,KAAKC,OAAOgJ,WAAWwO,KAAKD,OAEvC/R,IAID+R,yBAIEE,EAAYC,OACfC,EAASxX,EAAMqD,cAAc,UAC7B+B,EAAahE,OAAOwJ,UAAW2M,GACjCpS,EAAOmS,EACPG,SACAC,SACAC,gBAEE,SAAUvS,MACDD,KAAO,UAGlB,UAAWC,GACuD,IAA9DA,EAAWkB,MAAMmQ,QAAQ7W,KAAKC,OAAOgJ,WAAW+O,aACrCtR,WAAa1G,KAAKC,OAAOgJ,WAAW+O,WAGxCtR,MAAQ1G,KAAKC,OAAOgJ,WAAW+O,QAItCzS,OACC,SACU,eACG,WACA,kBAGb,aACU,mBACG,iBACA,wBAGb,eACU,qBACG,qBACA,4BAGb,eACUmB,MAAQ,qBACZ,SACI,SACG,uBAIHnB,IACGA,WAIhBzE,OAAO0E,EAAYpF,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUC,QAAQpC,GAAOC,IAG1FpF,EAAMC,GAAGoC,OAAOqV,MACT3S,YACHqC,EAAS0Q,WAAWrX,KAAKb,KAAM8X,kBACXA,OAKrB3S,YAAYqC,EAAS0Q,WAAWrX,KAAKb,KAAM6X,MAC3C1S,YAAYqC,EAAS2Q,YAAYtX,KAAKb,KAAM+X,MAE7CrS,cAAckS,EAAQpS,QAEvBlB,SAASqD,QAAQpC,GAAQqS,EAEvBA,wBAICrS,EAAMC,OAERiP,EAAQrU,EAAMqD,cAChB,aAES+B,EAAWmB,SACT3G,KAAKC,OAAOgJ,WAAWsO,QAElCvX,KAAKC,OAAOyU,KAAKnP,IAIfjE,EAAQlB,EAAMqD,cAChB,QACArD,EAAMU,OACFV,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUe,OAAOlD,UAEnD,YACD,MACA,SACC,UACC,eACO,OAElBC,gBAIHlB,SAASmE,OAAOlD,GAAQjE,IAGpBiS,gBAAgB1S,KAAKb,KAAMsB,8CASzBiE,EAAMC,OACXgD,EAAWpI,EAAMqD,cACnB,WACArD,EAAMU,OACFV,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUkB,QAAQrD,SAErD,MACA,UACE,GAEXC,OAKK,WAATD,EAAmB,GACVJ,YAAY/E,EAAMqD,cAAc,OAAQ,KAAM,UAEnD2U,EAAS,UACL7S,OACC,WACQvF,KAAKC,OAAOyU,KAAK2D,iBAGzB,WACQrY,KAAKC,OAAOyU,KAAKa,WAOzB5P,iBAAmByS,EAAOhF,0BAGlC9O,SAASsE,QAAQrD,GAAQiD,EAEvBA,uBAIAjD,OACD+B,EAAYlH,EAAMqD,cAAc,cAC3B,wBAGD0B,YACN/E,EAAMqD,cACF,cAEWzD,KAAKC,OAAOgJ,WAAWsO,QAElCvX,KAAKC,OAAOyU,KAAKnP,OAIfJ,YACN/E,EAAMqD,cAAc,OAAQrD,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUkB,QAAQrD,IAAQ,eAGjGjB,SAASsE,QAAQrD,GAAQ+B,EAEvBA,8BAIOuC,MAGT7J,KAAKC,OAAOqY,SAAS5P,MACrBtI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASmE,OAAOC,OAC1CtI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASsE,QAAQI,cAC1B,IAAlBhJ,KAAK8I,cAMLyP,EAAU,EACRC,EAAaxY,KAAKsE,SAASmE,OAAOC,KAAK+P,wBACvCC,EAAa1Y,KAAKC,OAAOgJ,WAAWC,uBAGtC9I,EAAMC,GAAGwJ,MAAMA,KACL,IAAM2O,EAAWG,OAAS9O,EAAM+O,MAAQJ,EAAWK,UAC1D,CAAA,IAAIzY,EAAM0Y,SAAS9Y,KAAKsE,SAASsE,QAAQI,YAAa0P,YAC/C1Y,KAAKsE,SAASsE,QAAQI,YAAY9F,MAAM2V,KAAKvS,QAAQ,IAAK,IAMpEiS,EAAU,IACA,EACHA,EAAU,QACP,OAIX/D,kBAAkB3T,KAAKb,KAAMA,KAAK8I,SAAW,IAAMyP,EAASvY,KAAKsE,SAASsE,QAAQI,kBAGhF1E,SAASsE,QAAQI,YAAY9F,MAAM2V,KAAUN,MAI9CnY,EAAMC,GAAGwJ,MAAMA,KAAW,aAAc,cAAcxC,SAASwC,EAAMtE,SAC/DoK,YAAY3P,KAAKsE,SAASsE,QAAQI,YAAa0P,EAAwB,eAAf7O,EAAMtE,2BAKlEwT,EAASnS,OACToS,EAAMhZ,KAAKsE,SAAS+D,SAAS4Q,KAAKF,GAClCG,EAAOlZ,KAAKsE,SAAS+D,SAAS8Q,MAAMJ,GAEtC3Y,EAAMC,GAAG+E,YAAY4T,KACjBpS,IACIuN,gBAAgB,YAEhBrO,aAAa,SAAU,KAI/B1F,EAAMC,GAAG+E,YAAY8T,KACjBtS,IACKuN,gBAAgB,YAEhBrO,aAAa,SAAU,8BAOzB4E,cACL0O,EAAOpZ,KAAKsE,SAAS+D,SAAS8Q,MAAMjI,QAAQ3J,cAAc,MAG5DnH,EAAMC,GAAGqC,MAAMgI,QACVA,QAAQwG,QAAUxG,EAAQ2O,OAAO,mBAAWtP,EAAK9J,OAAOiR,QAAQxG,QAAQrD,SAAS6J,UAEjFxG,QAAQwG,QAAUlR,KAAKC,OAAOiR,QAAQxG,YAIzC9D,GAAUxG,EAAMC,GAAGC,MAAMN,KAAK0K,QAAQwG,UAA0B,YAAdlR,KAAKuF,UACpD+T,UAAUzY,KAAKb,KAAM,UAAW4G,GAGpCA,KAKC2S,aAAaH,OAGbI,EAAW,gBACT/E,EAAQ,UAEJvD,OACC,WACO,eAGP,WACO,iBAGP,aAIA,UACO,YAOXuD,EAAM7R,OAIJ4E,EAASiS,YAAY5Y,OAAW4T,GAH5B,WAMV/J,QAAQwG,QAAQvM,QAAQ,gBACnB+U,EAAOtZ,EAAMqD,cAAc,MAE3BgR,EAAQrU,EAAMqD,cAAc,eACvBsG,EAAK9J,OAAOgJ,WAAW+O,UAG5B2B,EAAQvZ,EAAMqD,cAChB,QACArD,EAAMU,OAAOV,EAAM6X,0BAA0BlO,EAAK9J,OAAOyH,UAAUe,OAAOyI,eAChE,aACA,qBACCA,OAIT/L,YAAYwU,KACZxU,YAAYpC,SAAS6W,eAAepS,EAASqS,SAAShZ,OAAW,UAAWqQ,SAE5EsG,EAAQgC,EAAStI,GACnB9Q,EAAMC,GAAG+E,YAAYoS,MACfrS,YAAYqS,KAGjBrS,YAAYsP,KACZtP,YAAYuU,OAGZ1I,cAAcnQ,KAAKb,KAAM,UAAWoZ,uBAKxCL,EAASvS,UACNuS,OACC,eACgB,IAAVvS,EAAc,SAAcA,gBAElC,iBACOA,OACC,eACM,YACN,eACM,YACN,eACM,YACN,cACM,WACN,cACM,WACN,eACM,WACN,cACM,WACN,aACM,WACN,gBACM,sBAEAA,MAGd,kBACMgB,EAASsS,YAAYjZ,KAAKb,qBAG1B,8BAKL+Y,EAASzR,OACb4R,EAAOlZ,KAAKsE,SAAS+D,SAAS8Q,MAAMJ,GACtCvS,EAAQ,KACR4S,EAAO9R,SAEHyR,OACC,aACO/Y,KAAKsI,SAASnH,SAEjBnB,KAAKsI,SAAS1H,YACP,uBAMJZ,KAAK+Y,GAGT3Y,EAAMC,GAAGC,MAAMkG,OACPxG,KAAKC,OAAO8Y,GAASgB,UAI5B/Z,KAAK0K,QAAQqO,GAAS1R,SAASb,oBAC3B4C,8BAA8B5C,WAAcuS,OAKhD/Y,KAAKC,OAAO8Y,GAASrO,QAAQrD,SAASb,oBAClC4C,2BAA2B5C,WAAcuS,GAQrD3Y,EAAMC,GAAG+E,YAAYgU,OACfF,GAAQA,EAAK3R,cAAc,WAIhCjC,EAAS8T,GAAQA,EAAK7R,8BAA8Bf,QAErDpG,EAAMC,GAAG+E,YAAYE,OAKnB0U,SAAU,EAGHha,KAAKsE,SAAS+D,SAAS4Q,KAAKF,GAASxR,kBAAkBvH,KAAKC,OAAOgJ,WAAWwO,KAAKjR,OAC3F+F,UAAY/E,EAASqS,SAAShZ,KAAKb,KAAM+Y,EAASvS,uCAMlD4S,EAAOpZ,KAAKsE,SAAS+D,SAAS8Q,MAAM9F,KAAK9L,cAAc,WAGxDjD,SAAS+D,SAAS4Q,KAAK5F,KAAKc,gBAAgB,eAC5C7P,SAAS+D,SAAS8Q,MAAM9F,KAAKc,gBAAgB,cAG5CvN,GAAUxG,EAAMC,GAAGC,MAAMN,KAAKqT,KAAK3I,WAChC4O,UAAUzY,KAAKb,KAAM,OAAQ4G,KAGhC2S,aAAaH,IAZF,QAAS,MAAO,MAAO,SAchCzU,QAAQ,gBACN+U,EAAOtZ,EAAMqD,cAAc,MAE3BmU,EAASxX,EAAMqD,cACjB,SACArD,EAAMU,OAAOV,EAAM6X,0BAA0BvG,EAAKzR,OAAOyH,UAAUC,QAAQ0L,YACjE,eACC3B,EAAKzR,OAAOgJ,WAAW+O,gCACLiC,IAE7BvI,EAAKzR,OAAOyU,KAAKuF,QAGhB,QAAS,OAAO5S,SAAS4S,GAAS,KAC7BzC,EAAQhQ,EAASiS,YAAY5Y,OAAW,WACvCsE,YAAYqS,KAGlBrS,YAAYyS,KACZzS,YAAYuU,oCAOhB1Z,KAAKsO,UAAUd,IAIf7M,EAAQuZ,YAAc9Z,EAAMC,GAAGC,MAAMN,KAAKsI,SAAS6R,QAC7Cna,KAAKC,OAAOyU,KAAK0F,KAGxBpa,KAAKsI,SAAS1H,QACPZ,KAAKsI,SAAS+R,aAAa5F,MAG/BzU,KAAKC,OAAOyU,KAAK4F,SAXb,4CAgBLlB,EAAOpZ,KAAKsE,SAAS+D,SAAS8Q,MAAM7Q,SAASf,cAAc,MAG3DX,GAAUxG,EAAMC,GAAGC,MAAMN,KAAKsI,SAAS6R,aACpCb,UAAUzY,KAAKb,KAAM,WAAY4G,KAGpC2S,aAAaH,IAGfhZ,EAAMC,GAAGC,MAAMN,KAAKsI,SAAS6R,aAK3BA,EAASpY,MAAM0C,KAAKzE,KAAKsI,SAAS6R,QAAQjO,IAAI,4BACtCqO,EAAMpZ,gBACT,QACCf,EAAMC,GAAGC,MAAMia,EAAM9F,OAAuB8F,EAAMpZ,SAASqZ,cAA7BD,EAAM9F,WAIzCgG,kBACO,SACHza,KAAKC,OAAOyU,KAAK0F,SAIrBzV,QAAQ,gBACL+U,EAAOtZ,EAAMqD,cAAc,MAE3BgR,EAAQrU,EAAMqD,cAAc,eACvBiX,EAAKza,OAAOgJ,WAAW+O,UAG5B2B,EAAQvZ,EAAMqD,cAChB,QACArD,EAAMU,OAAOV,EAAM6X,0BAA0ByC,EAAKza,OAAOyH,UAAUe,OAAOtH,gBAChE,aACA,sBACCoZ,EAAMpZ,YAIjBoZ,EAAMpZ,SAASiS,gBAAkBsH,EAAKpS,SAASnH,SAASiS,kBAClD4G,SAAU,KAGd7U,YAAYwU,KACZxU,YAAYpC,SAAS6W,eAAeW,EAAM9F,OAAS8F,EAAMpZ,WAE3DoZ,EAAM/C,SACArS,YAAYqC,EAASiS,YAAY5Y,OAAW0Z,EAAMpZ,SAASqZ,kBAGhErV,YAAYsP,KACZtP,YAAYuU,OAGZ1I,cAAcnQ,KAAKb,KAAM,WAAYoZ,2BAIrC1O,cAELtK,EAAMC,GAAGqC,MAAMgI,QACVA,QAAQuG,MAAQvG,EAAQ2O,OAAO,mBAASsB,EAAK1a,OAAOgR,MAAMvG,QAAQrD,SAAS4J,UAE3EvG,QAAQuG,MAAQjR,KAAKC,OAAOgR,MAAMvG,YAIrC9D,GAAUxG,EAAMC,GAAGC,MAAMN,KAAK0K,QAAQuG,YACnCqI,UAAUzY,KAAKb,KAAM,QAAS4G,GAGlCA,OAKCwS,EAAOpZ,KAAKsE,SAAS+D,SAAS8Q,MAAMlI,MAAM1J,cAAc,WAGzDjD,SAAS+D,SAAS4Q,KAAKhI,MAAMkD,gBAAgB,eAC7C7P,SAAS+D,SAAS8Q,MAAMlI,MAAMkD,gBAAgB,YAG7CoF,aAAaH,QAGd1O,QAAQuG,MAAMtM,QAAQ,gBACjB+U,EAAOtZ,EAAMqD,cAAc,MAE3BgR,EAAQrU,EAAMqD,cAAc,eACvBkX,EAAK1a,OAAOgJ,WAAW+O,UAG5B2B,EAAQvZ,EAAMqD,cAChB,QACArD,EAAMU,OAAOV,EAAM6X,0BAA0B0C,EAAK1a,OAAOyH,UAAUe,OAAOwI,aAChE,aACA,mBACCA,OAIT9L,YAAYwU,KACZiB,mBAAmB,YAAapT,EAASqS,SAAShZ,OAAW,QAASoQ,MACvE9L,YAAYsP,KACZtP,YAAYuU,OAGZ1I,cAAcnQ,KAAKb,KAAM,QAASoZ,yBAIpCvP,OACCqJ,EAASlT,KAAKsE,SAAS+D,SAAvB6K,KACF0E,EAAS5X,KAAKsE,SAASqD,QAAQU,SAC/BwS,EAAOza,EAAMC,GAAGsK,QAAQd,GAASA,EAAQqJ,GAA6C,SAArCA,EAAK7H,aAAa,kBAErEjL,EAAMC,GAAGwJ,MAAMA,GAAQ,KACjBiR,EAAa5H,GAAQA,EAAKrM,SAASgD,EAAMvE,QACzCyV,EAAWlR,EAAMvE,SAAWtF,KAAKsE,SAASqD,QAAQU,YAKpDyS,IAAgBA,IAAeC,GAAYF,SAK3CE,KACM1I,kBAKVuF,KACO9R,aAAa,gBAAiB+U,GAErC3H,MACKpN,aAAa,eAAgB+U,GAE9BA,IACK1G,gBAAgB,cAEhBrO,aAAa,YAAa,yBAMhCkT,OACDgC,EAAQhC,EAAIjU,WAAU,KACtB7B,MAAM+X,SAAW,aACjB/X,MAAMgY,QAAU,IAChBpV,aAAa,eAAe,SAG5BrB,KAAKuW,EAAMzX,iBAAiB,gBAAgBoB,QAAQ,gBAChDwW,EAAO7Z,EAAM+J,aAAa,UAC1BvF,aAAa,OAAWqV,gBAI9BtX,WAAWsB,YAAY6V,OAGrBrC,EAAQqC,EAAMI,YACdC,EAASL,EAAMM,sBAGflH,cAAc4G,wCAShBnR,OACI4N,EAASzX,KAAKsE,SAAS+D,SAAvBoP,KACFuB,EAAMnP,EAAMvE,OACZuV,EAA6C,UAAtC7B,EAAI3N,aAAa,iBACxB6N,EAAOnW,SAASwY,eAAevC,EAAI3N,aAAa,qBAGjDjL,EAAMC,GAAG+E,YAAY8T,IAKkB,aAA9BA,EAAK7N,aAAa,aAO1BC,EAAUmM,EAAKlQ,cAAc,0CAC7BD,EAAYgE,EAAQzH,oBAGpBY,KAAKgT,EAAKlU,oCAAoC+H,EAAQD,aAAa,aAAY1G,QAAQ,cAClFmB,aAAa,iBAAiB,KAIrCnF,EAAQ6a,cAAgB7a,EAAQ8a,cAAe,GAErCvY,MAAMyV,MAAWrN,EAAQ8P,mBACzBlY,MAAMmY,OAAY/P,EAAQgQ,sBAG9BI,EAAOlU,EAASmU,WAAW9a,KAAKb,KAAMkZ,GAGtC0C,EAAU,SAAVA,KAEEvX,EAAEiB,SAAWgC,IAAe,QAAS,UAAUD,SAAShD,EAAEwX,kBAKpD3Y,MAAMyV,MAAQ,KACdzV,MAAMmY,OAAS,KAGnBS,IAAIxU,EAAWlH,EAAMsO,cAAekN,OAIxChS,GAAGtC,EAAWlH,EAAMsO,cAAekN,KAG/B1Y,MAAMyV,MAAW+C,EAAK/C,aACtBzV,MAAMmY,OAAYK,EAAKL,cAI7BvV,aAAa,eAAe,KAC5BA,aAAa,YAAa,KAG7BA,aAAa,eAAgB+U,KAC9B/U,aAAa,gBAAiB+U,KAC7B1G,gBAAgB,8BAKlBxH,iBAECvM,EAAMC,GAAGC,MAAMN,KAAKC,OAAOuH,iBACpB,SAILF,EAAYlH,EAAMqD,cACpB,MACArD,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUF,SAASjD,aAI/DvE,KAAKC,OAAOuH,SAASH,SAAS,cACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,YAIvDA,KAAKC,OAAOuH,SAASH,SAAS,aACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,WAIvDA,KAAKC,OAAOuH,SAASH,SAAS,YACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,WAC7CmF,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,WAIvDA,KAAKC,OAAOuH,SAASH,SAAS,mBACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,iBAIvDA,KAAKC,OAAOuH,SAASH,SAAS,YAAa,KACrCmB,EAAWpI,EAAMqD,cACnB,OACArD,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUc,WAIpDE,EAAOlB,EAASwU,YAAYnb,KAAKb,KAAM,wBACxB2M,EAAKhG,UAEjBxB,YAAYuD,EAAK+L,SACjBtP,YAAYuD,EAAKpH,SAGjB6D,YAAYqC,EAASyU,eAAepb,KAAKb,KAAM,WAKpDA,KAAKC,OAAOqY,SAAS5P,KAAM,KACrBQ,EAAU9I,EAAMqD,cAClB,aAEU,gBACCzD,KAAKC,OAAOgJ,WAAWC,SAElC,WAGK/D,YAAY+D,QAChB5E,SAASsE,QAAQI,YAAcE,OAGnC5E,SAASkE,SAAWA,IACfrD,YAAYnF,KAAKsE,SAASkE,aAIpCxI,KAAKC,OAAOuH,SAASH,SAAS,mBACpBlC,YAAYqC,EAAS0U,WAAWrb,KAAKb,KAAM,gBAIrDA,KAAKC,OAAOuH,SAASH,SAAS,eACpBlC,YAAYqC,EAAS0U,WAAWrb,KAAKb,KAAM,aAIrDA,KAAKC,OAAOuH,SAASH,SAAS,WACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,SAIvDA,KAAKC,OAAOuH,SAASH,SAAS,UAAW,KACnCsB,EAASvI,EAAMqD,cAAc,cACxB,iBAIL+B,OACG,OACC,UACCxF,KAAKC,OAAO0I,QAIjB8F,EAAQjH,EAASwU,YAAYnb,KAC/Bb,KACA,SACAI,EAAMU,OAAO0E,qBACUmH,EAAKhG,QAGzBxB,YAAYsJ,EAAMgG,SAClBtP,YAAYsJ,EAAMnN,SAEf6D,YAAYwD,MAItB3I,KAAKC,OAAOuH,SAASH,SAAS,eACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,aAIvDA,KAAKC,OAAOuH,SAASH,SAAS,cAAgBjH,EAAMC,GAAGC,MAAMN,KAAKC,OAAOoI,UAAW,KAC9EoP,EAAOrX,EAAMqD,cAAc,aACtB,iBAGN0B,YACDqC,EAASuU,aAAalb,KAAKb,KAAM,uCACD2M,EAAKhG,oBAChB,mCACiBgG,EAAKhG,oBACtB,SAInBuM,EAAO9S,EAAMqD,cAAc,cACtB,4CACckJ,EAAKhG,kBACX,6CAC6BgG,EAAKhG,QAC3C,oBACK,IAGTwV,EAAQ/b,EAAMqD,cAAc,OAE5B2Y,EAAOhc,EAAMqD,cAAc,2BACRkJ,EAAKhG,0BACX,6CAC6BgG,EAAKhG,QAC3C,aAIJsS,EAAO7Y,EAAMqD,cAAc,WACvB,iBAILxD,OAAOoI,SAAS1D,QAAQ,gBACnBqU,EAAM5Y,EAAMqD,cAAc,WACtB,aACE,KAGNmU,EAASxX,EAAMqD,cACjB,SACArD,EAAMU,OAAOV,EAAM6X,0BAA0BoE,EAAKpc,OAAOyH,UAAUC,QAAQU,gBACjE,eACIgU,EAAKpc,OAAOgJ,WAAW+O,YAAWqE,EAAKpc,OAAOgJ,WAAW+O,wCAC9CrL,EAAKhG,OAAMpB,0BACf,mCACiBoH,EAAKhG,OAAMpB,mBAC5B,IAErB8W,EAAKpc,OAAOyU,KAAKnP,IAGfiB,EAAQpG,EAAMqD,cAAc,cACvB4Y,EAAKpc,OAAOgJ,WAAWwO,KAAKjR,UAIjC+F,UAAYI,EAAKpH,KAEhBJ,YAAYqB,KACfrB,YAAYyS,KACXzS,YAAY6T,KAEZ1U,SAAS+D,SAAS4Q,KAAK1T,GAAQyT,MAGnC7T,YAAY8T,KACX9T,YAAYiX,QAGbnc,OAAOoI,SAAS1D,QAAQ,gBACnBuU,EAAO9Y,EAAMqD,cAAc,2BACRkJ,EAAKhG,OAAMpB,iBACjB,sCACsBoH,EAAKhG,OAAMpB,cAC1C,qBACK,SACH,KAGN+W,EAAOlc,EAAMqD,cACf,eAEU,eACI4Y,EAAKpc,OAAOgJ,WAAW+O,YAAWqE,EAAKpc,OAAOgJ,WAAW+O,kCAClD,mCACiBrL,EAAKhG,4BACtB,GAErB0V,EAAKpc,OAAOyU,KAAKnP,MAGhBJ,YAAYmX,OAEX5R,EAAUtK,EAAMqD,cAAc,QAE/B0B,YAAYuF,KACXvF,YAAY+T,KAEb5U,SAAS+D,SAAS8Q,MAAM5T,GAAQ2T,MAGpC/T,YAAYgX,KACZhX,YAAY+N,KACP/N,YAAYsS,QAEjBnT,SAAS+D,SAAS6K,KAAOA,OACzB5O,SAAS+D,SAASoP,KAAOA,SAI9BzX,KAAKC,OAAOuH,SAASH,SAAS,QAAU1G,EAAQwH,OACtChD,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,QAIvDA,KAAKC,OAAOuH,SAASH,SAAS,YAAc1G,EAAQyH,WAC1CjD,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,YAIvDA,KAAKC,OAAOuH,SAASH,SAAS,iBACpBlC,YAAYqC,EAASuU,aAAalb,KAAKb,KAAM,eAIvDA,KAAKC,OAAOuH,SAASH,SAAS,qBACzB/C,SAASqD,QAAQiN,UAAYpN,EAASuU,aAAalb,KAAKb,KAAM,mBAC9DsE,SAASgD,UAAUnC,YAAYnF,KAAKsE,SAASqD,QAAQiN,iBAGzDtQ,SAASkD,SAAWF,EAErBtH,KAAKC,OAAOuH,SAASH,SAAS,aAAerH,KAAKC,OAAOoI,SAAShB,SAAS,YAClEkV,aAAa1b,KAAKb,MAGxBsH,mCAMHtH,KAAKC,OAAOuc,WAAY,KAClB5F,EAAUpP,EAASuP,WAAWlW,KAAKb,MAGrC4W,EAAQK,eACHvH,yCAAwC1P,KAAKyN,QAAQ4D,KAAO,cAAgB,OAC3EmL,WAAW5F,EAAQtT,IAAK,qBAEzBoM,IAAI,0DAKZ/I,GAAK3C,KAAKC,MAAsB,IAAhBD,KAAKE,cAGtBoD,EAAY,OAGZlH,EAAMC,GAAGoC,OAAOzC,KAAKC,OAAOuH,UAChBxH,KAAKC,OAAOuH,SACjBpH,EAAMC,GAAG4N,SAASjO,KAAKC,OAAOuH,UAGzBxH,KAAKC,OAAOuH,aAChBxH,KAAK2G,YACC3G,KAAKC,OAAOwc,eACfzc,KAAKC,OAAO0U,QAIXnN,EAASkV,OAAO7b,KAAKb,SACzBA,KAAK2G,YACC3G,KAAKC,OAAOwc,eACfzc,KAAKiR,cACHjR,KAAKkR,iBACJ1J,EAASsS,YAAYjZ,KAAKb,YAOxCsF,YAGAlF,EAAMC,GAAGoC,OAAOzC,KAAKC,OAAOyH,UAAUF,SAASF,eACtCvE,SAASwE,cAAcvH,KAAKC,OAAOyH,UAAUF,SAASF,YAI9DlH,EAAMC,GAAG+E,YAAYE,OACbtF,KAAKsE,SAASgD,WAIvBlH,EAAMC,GAAG+E,YAAYkC,KACdnC,YAAYmC,KAEZsT,mBAAmB,YAAatT,GAIvClH,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASkD,aAC7BmV,aAAa9b,KAAKb,MAIxBA,KAAKC,OAAOqY,SAAS9Q,SAAU,KACzBoV,EAASxc,EAAMwH,YAAY/G,KAC7Bb,MAEIA,KAAKC,OAAOyH,UAAUF,SAASjD,QAC/B,IACAvE,KAAKC,OAAOyH,UAAUkV,OACtB,KACA5c,KAAKC,OAAOgJ,WAAWsO,QACzBnL,KAAK,WAGL3H,KAAKmY,GAAQjY,QAAQ,cACjBgL,YAAY8E,EAAOoI,EAAK5c,OAAOgJ,WAAWsO,QAAQ,KAClD5H,YAAY8E,EAAOoI,EAAK5c,OAAOgJ,WAAWC,SAAS,QC7rCnEZ,kCAIOtI,KAAKsO,UAAUd,OAKfpN,EAAMC,GAAGC,MAAMJ,EAAQP,IAAIkB,KAAKb,MAAMmB,UAEhCf,EAAMC,GAAGC,MAAMN,KAAKsI,SAASnH,iBAC/BmH,SAASnH,SAAWnB,KAAKC,OAAOqI,SAASnH,SAASiS,oBAFlD9K,SAASnH,SAAWjB,EAAQP,IAAIkB,KAAKb,MAAMmB,SAM/Cf,EAAMC,GAAGsK,QAAQ3K,KAAKsI,SAAS1H,WAC3BR,EAAMC,GAAGC,MAAMJ,EAAQP,IAAIkB,KAAKb,MAAMmB,eAGlCmH,SAAS1H,QAAUZ,KAAKC,OAAOqI,SAAS0B,YAFxC1B,SAAS1H,QAAUV,EAAQP,IAAIkB,KAAKb,MAAMsI,YAOjD,QAAS,SAASjB,SAASrH,KAAKuF,OAAwB,UAAdvF,KAAKuF,OAAqB5E,EAAQuZ,uBACzE5R,SAAS6R,OAAS,UAGnBna,KAAKC,OAAOuH,SAASH,SAAS,aAAerH,KAAKC,OAAOoI,SAAShB,SAAS,eAClEyV,gBAAgBjc,KAAKb,UAOjCI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASgE,iBAC/BhE,SAASgE,SAAWlI,EAAMqD,cAC3B,MACArD,EAAM6X,0BAA0BjY,KAAKC,OAAOyH,UAAUY,aAEpDyU,YAAY/c,KAAKsE,SAASgE,SAAUtI,KAAKsE,SAASC,UAI1C,UAAdvE,KAAKuF,YACA+C,SAAS6R,OAASna,KAAKoO,MAAM8L,cAIhCvK,YACF3P,KAAKsE,SAASgD,UACdtH,KAAKC,OAAOgJ,WAAWX,SAAS1H,SAC/BR,EAAMC,GAAGC,MAAMN,KAAKsI,SAAS6R,UAI9B/Z,EAAMC,GAAGC,MAAMN,KAAKsI,SAAS6R,WAKxBU,KAAKha,KAAKb,UAGbgd,EAAkB,aAEf1U,SAAS+R,aAAe,WAGvB5V,KAAKsF,EAAKzB,SAAS6R,QAAQxV,QAAQ,YACjC4V,EAAMpZ,WAAa4I,EAAKzB,SAASnH,SAASiS,kBACrC9K,SAAS+R,aAAeE,cASpCna,EAAMC,GAAGka,MAAMva,KAAKsI,SAAS+R,cAAe,KACrClZ,EAAanB,KAAKC,OAAOqI,SAAzBnH,cAIHmH,SAASnH,SAAWA,MAMpBf,EAAMC,GAAGka,MAAMva,KAAKsI,SAAS+R,oBACzB3H,gBAAe,KAGf1B,cAAcnQ,KAAKb,KAAM,eAIpB,UAAdA,KAAKuF,KAAkB,OAEjBd,KAAKzE,KAAKsI,SAAS6R,QAAQxV,QAAQ,cAE/BmX,IAAIvB,EAAO,YAAa,mBAASjS,EAAS2U,OAAOpc,OAAWgJ,OAG5DqT,KAAO,eAIX5O,EACFtO,KAAKsI,SAAS+R,eAAiB,WAAY,aAAahT,SAASrH,KAAKsI,SAAS+R,aAAa7X,MAE5FpC,EAAMC,GAAGka,MAAMva,KAAKsI,SAAS+R,eAAiB/L,MACxC1E,GAAG5J,KAAKsI,SAAS+R,aAAc,YAAa,mBAAS/R,EAAS2U,OAAOpc,OAAWgJ,KAGlF7J,KAAKsI,SAAS+R,aAAa8C,YAAcnd,KAAKsI,SAAS+R,aAAa8C,WAAWva,OAAS,KAC/Eqa,OAAOpc,KAAKb,KAAMA,KAAKsI,SAAS+R,mBAG5B,UAAdra,KAAKuF,MAAoBvF,KAAKsI,SAAS0B,aACzCoT,MAAMC,gBAAgBrd,KAAKsI,SAASnH,UAIzCnB,KAAKC,OAAOuH,SAASH,SAAS,aAAerH,KAAKC,OAAOoI,SAAShB,SAAS,eAClEyV,gBAAgBjc,KAAKb,yBAK/BsB,OAGG0I,GADQ5J,EAAMC,GAAGwJ,MAAMvI,GAASA,EAAMgE,OAAShE,GAChC6b,WAAW,GAG5B/c,EAAMC,GAAGid,IAAItT,KACJvJ,IAAII,KAAKb,KAAMgK,EAAOuT,kBAEtB9c,IAAII,KAAKb,QAGhBkL,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAO,2BAI3C9M,MAEKtB,KAAKsO,UAAUd,MAIhBpN,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASgE,UAAW,KACxCwE,EAAU1M,EAAMqD,cAAc,UAG9B8V,aAAavZ,KAAKsE,SAASgE,cAG3BkV,EAAWpd,EAAMC,GAAGyB,UAAUR,GAAiB,GAARA,EAGzClB,EAAMC,GAAGoC,OAAO+a,KACR7X,YAAc6X,EAAQpX,SAEtBjB,YAAYqY,QAInBlZ,SAASgE,SAASnD,YAAY2H,aAE9B1D,KAAK,wDAOThJ,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASqD,QAAQW,eAK5C0B,EAAS9J,EAAQP,IAAIkB,KAAKb,MAAMsI,SAG/BlI,EAAMC,GAAGsK,QAAQX,QAGb1B,SAAS0B,OAASA,IAFThK,KAAKC,OAAOqI,SAAvB0B,OAKHA,MACM2F,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWX,SAAS0B,QAAQ,KAC7E4F,YAAY5P,KAAKsE,SAASqD,QAAQW,UAAU,OCvMxDmV,+BAEQC,EAAUtd,EAAMud,eAAe3d,KAAK4d,SAGpCC,EAAazd,EAAMwH,YAAY/G,KAAKb,cAAeA,KAAKuF,kBACxDd,KAAKoZ,GAAYlZ,QAAQvE,EAAMgU,iBAG/BzE,YAAY3P,KAAKsE,SAASC,QAASvE,KAAKC,OAAOgJ,WAAWmU,OAAO,QAGlEhP,MAAMtI,aAAa,KAAM1F,EAAM0d,WAAW9d,KAAKuF,OAGhDnF,EAAMC,GAAGK,OAAOb,OAAOke,MACfzJ,MAAMzT,KAAKb,KAAM0d,MAGnBM,WAAWhe,KAAKC,OAAOge,KAAKR,QAAQlQ,YAGnC2Q,wBAA0Bre,OAAOqe,mCAGjCA,wBAAwBC,KAAK,aACxB7J,MAAMzT,OAAW6c,YAItBU,wBAA0B,kBACtBF,wBAAwBvZ,QAAQ,oCAQ7C+Y,OACIW,EAASre,OAIRod,MAAQ,IAAIvd,OAAOke,GAAGO,OAAOD,EAAOjQ,MAAMzH,mCAG/B0X,EAAOpe,OAAOsU,SAAW,EAAI,WAC7B8J,EAAO/P,UAAUd,GAAK,EAAI,MAC/B,WACK,iBACM,iBACA,YACL,cACE,SAGL3N,QAAUA,OAAO0e,SAASC,yBACjB3e,QAAUA,OAAO0e,SAASE,+BAOnC5U,KACEqB,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,SAAS,QAC9CvE,EAAM8C,WACL9C,EAAMvE,2CAGGuE,OAEd6U,EAAW7U,EAAMvE,SAGhB8I,MAAM8C,QAAUwN,EAASC,uBAE1BzT,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,gDAE9BvE,OAEX6U,EAAW7U,EAAMvE,SAGhB8I,MAAMwQ,aAAeF,EAASG,oBAE/B3T,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,gCAE3CvE,OAEE6U,EAAW7U,EAAMvE,SAGhB8I,MAAMvG,KAAO,aACPiX,cACF1Q,MAAMyC,QAAS,KAEnBzC,MAAMtG,MAAQ,aACRiX,eACF3Q,MAAMyC,QAAS,KAEnBzC,MAAM4Q,KAAO,aACPC,cACF7Q,MAAMyC,QAAS,KAEnBzC,MAAMtF,SAAW4V,EAASQ,gBAC1B9Q,MAAMyC,QAAS,IACfzC,MAAMoE,MAAQkM,EAASS,YACvB/Q,MAAMrF,YAAc,SAGpBwF,eAAe8P,EAAOjQ,MAAO,qCAErB3M,OAAOid,EAASU,gCAEvB1J,KAEOtH,MAAM6H,SAAU,IAGjB/K,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,aAGtCiR,OAAO3J,aAKjBnH,eAAe8P,EAAOjQ,MAAO,sCAErBsQ,EAASG,gCAEhBvd,KACSge,gBAAgBhe,UAK7BqH,EAAS+V,EAASa,YAAc,WAC7BhR,eAAe8P,EAAOjQ,MAAO,gCAErBzF,gBAEPrH,KACSA,IACAke,UAAmB,IAAT7W,KACbuC,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,0BAKhDG,eAAe8P,EAAOjQ,MAAO,+BAErBsQ,EAASS,wBAEhB7d,OACMsF,IAASxG,EAAMC,GAAGsK,QAAQrJ,IAASA,IAChCsF,EAAS,OAAS,cACrBsE,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,0BAKhDG,eAAe8P,EAAOjQ,MAAO,oCAErBsQ,EAASe,iBAKpBpB,EAAOpe,OAAOuH,SAASH,SAAS,aAAegX,EAAOpe,OAAOoI,SAAShB,SAAS,YACtEkV,aAAa1b,KAAKwd,EAAQK,EAASgB,+BAIzCzf,OAAO0U,MAAQ+J,EAASiB,eAAehL,MAG1C0J,EAAO/P,UAAUd,MACVY,MAAMtI,aAAa,YAAa,KAGrCoF,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,gBACzClD,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,yBAGxCwR,cAAcvB,EAAOjJ,OAAOyK,aAG5BzK,OAAOyK,UAAYhgB,OAAOigB,YAAY,aAElC1R,MAAMmH,SAAWmJ,EAASqB,0BAGC,OAA9B1B,EAAOjQ,MAAM4R,cAAyB3B,EAAOjQ,MAAM4R,aAAe3B,EAAOjQ,MAAMmH,aACzErK,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,cAI5CA,MAAM4R,aAAe3B,EAAOjQ,MAAMmH,SAGX,IAA1B8I,EAAOjQ,MAAMmH,kBACNqK,cAAcvB,EAAOjJ,OAAOyK,aAG7B3U,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,oBAEpD,YAGI2E,WAAW,kBAAMvF,EAAGyS,MAAMpf,KAAKwd,IAAS,4BAErCxU,OAEJ6U,EAAW7U,EAAMvE,qBAGhBsa,cAAcvB,EAAOjJ,OAAOJ,SAS3BnL,EAAM8C,WACL,KAEG0R,EAAOpe,OAAOoT,KAAKrJ,OAAQ,GAElBiV,cACAH,oBAKN1Q,MAAMyC,QAAS,IAEhB3F,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,oBAI9C,IACMA,MAAMyC,QAAS,EAGlBwN,EAAOjQ,MAAM6H,WACP/K,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,YAG5CA,MAAM6H,SAAU,IAEjB/K,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,UACzClD,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,aAGxCgH,OAAOJ,QAAUnV,OAAOigB,YAAY,aACjC5U,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,eAChD,IAKCiQ,EAAOjQ,MAAMtF,WAAa4V,EAASQ,kBAC5B9Q,MAAMtF,SAAW4V,EAASQ,gBAC3BhU,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,qBAI1C8R,eAAerf,KAAKwd,EAAQK,EAASyB,wCAI7C,IACM/R,MAAMyC,QAAS,IAEhB3F,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,WAQjDlD,cAAcrK,KAAKwd,EAAQA,EAAO/Z,SAASgD,UAAW,eAAe,QACjEuC,EAAM8C,aChS9ByT,+BAGQvC,EAAazd,EAAMwH,YAAY/G,KAAKb,cAAeA,KAAKuF,qBACxDd,KAAKoZ,GAAYlZ,QAAQvE,EAAMgU,iBAG/BzE,YAAY3P,KAAKsE,SAASC,QAASvE,KAAKC,OAAOgJ,WAAWmU,OAAO,QAGlEhP,MAAMtI,aAAa,KAAM1F,EAAM0d,WAAW9d,KAAKuF,OAG/CnF,EAAMC,GAAGK,OAAOb,OAAOwgB,SAUlB/L,MAAMzT,KAAKb,UAVe,GAC1Bge,WAAWhe,KAAKC,OAAOge,KAAKmC,MAAM7S,SAElC+S,EAAazgB,OAAOigB,YAAY,WAC9B1f,EAAMC,GAAGK,OAAOb,OAAOwgB,gBAChBT,cAAcU,KACfhM,MAAMzT,UAEjB,kCAQDwd,EAASre,KAGT0K,QACI1K,KAAKC,OAAOoT,KAAKrJ,gBACbhK,KAAKC,OAAOsU,iBACd,YACE,SACH,cACM,GAEXgM,EAASngB,EAAMogB,mBAAmB9V,GAClC/D,EAAKvG,EAAMqgB,aAAazgB,KAAK4d,SAG7B9I,EAAS1U,EAAMqD,cAAc,UAC7BC,oCAAwCiD,MAAM4Z,IAC7Cza,aAAa,MAAOpC,KACpBoC,aAAa,kBAAmB,MAChCsI,MAAMjJ,YAAY2P,KAIlBsI,MAAQ,IAAIvd,OAAOwgB,MAAM/B,OAAOxJ,KAGhC1G,MAAMvG,KAAO,aACTuV,MAAMvV,SACNuG,MAAMyC,QAAS,KAEnBzC,MAAMtG,MAAQ,aACVsV,MAAMtV,UACNsG,MAAMyC,QAAS,KAEnBzC,MAAM4Q,KAAO,aACT5B,MAAM4B,SACN5Q,MAAMyC,QAAS,KAGnBzC,MAAMyC,QAAS,IACfzC,MAAMrF,YAAc,MAGrBA,EAAgBsV,EAAOjQ,MAAvBrF,mBACCwF,eAAe8P,EAAOjQ,MAAO,qCAErBrF,gBAEP2M,OAGQ7E,EAAWwN,EAAOjQ,MAAlByC,SAGDzC,MAAM6H,SAAU,IAGjB/K,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,aAGxCgP,MAAMsD,eAAehL,GAGxB7E,QACK/I,kBAOVyG,eAAe8P,EAAOjQ,MAAO,sCAErB,6BAMTzF,EAAW0V,EAAOjQ,MAAlBzF,cACC4F,eAAe8P,EAAOjQ,MAAO,gCAErBzF,gBAEPrH,KACSA,IACF8b,MAAMoC,UAAUle,KACjB4J,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,0BAKhDG,eAAe8P,EAAOjQ,MAAO,+BAEV,IAAXzF,gBAEPrH,OACMsF,IAASxG,EAAMC,GAAGsK,QAAQrJ,IAASA,IAClCqH,OAAS/B,EAAS,EAAIyX,EAAOpe,OAAO0I,cAK/CgY,WACGvD,MAAMqC,cAAcmB,KAAK,cACfpa,WAEV+H,eAAe8P,EAAOjQ,MAAO,oCAErBuS,OAKRvD,MAAMyD,gBAAgBD,KAAK,cACvB3gB,OAAO0U,MAAQA,MAInByI,MAAMgC,iBAAiBwB,KAAK,cACjBpa,IACR0E,cAAcrK,OAAW6Q,EAAKtD,MAAO,kBAIxCgP,MAAM8B,cAAc0B,KAAK,cACrBxS,MAAMtF,SAAWtC,IAClB0E,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,sBAI5CgP,MAAM0D,gBAAgBF,KAAK,cACvBtY,SAAS6R,OAASA,IAChBrK,MAAMjP,KAAKwd,OAGjBjB,MAAMxT,GAAG,YAAa,gBACrB0T,EAAM,KAEN3Q,EAAKoU,KAAKne,WACJxC,EAAM4gB,UAAUrU,EAAKoU,KAAK,GAAGtb,SAG9BhF,IAAII,KAAKwd,EAAQf,OAGvBF,MAAMxT,GAAG,SAAU,WAClBxJ,EAAMC,GAAG+E,YAAYiZ,EAAOjB,MAAMxY,UAAYyZ,EAAO/P,UAAUd,IACjD6Q,EAAOjB,MAAMxY,QAIrBkB,aAAa,YAAa,OAIjCsX,MAAMxT,GAAG,OAAQ,aACbwE,MAAMyC,QAAS,IAChB3F,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,UACzClD,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,eAG5CgP,MAAMxT,GAAG,QAAS,aACdwE,MAAMyC,QAAS,IAChB3F,cAAcrK,KAAKwd,EAAQA,EAAOjQ,MAAO,gBAG9CgP,MAAMxT,GAAG,aAAc,cACnBwE,MAAM6H,SAAU,IACPtJ,EAAKsU,UACb/V,cAAcrK,OAAW6Q,EAAKtD,MAAO,qBAG1CgP,MAAMxT,GAAG,WAAY,cACjBwE,MAAMmH,SAAW5I,EAAK4L,UACrBrN,cAAcrK,OAAW6Q,EAAKtD,MAAO,YAER,IAA/BwH,SAASjJ,EAAK4L,QAAS,OAEjBrN,cAAcrK,OAAW6Q,EAAKtD,MAAO,yBAI9CgP,MAAMxT,GAAG,SAAU,aACfwE,MAAM6H,SAAU,IACf/K,cAAcrK,OAAW6Q,EAAKtD,MAAO,YACrClD,cAAcrK,OAAW6Q,EAAKtD,MAAO,eAG1CgP,MAAMxT,GAAG,QAAS,aACdwE,MAAMyC,QAAS,IACd3F,cAAcrK,OAAW6Q,EAAKtD,MAAO,kBAIxC2E,WAAW,kBAAMvF,EAAGyS,MAAMpf,KAAKwd,IAAS,KC9NjDjQ,uBAIOpO,KAAKoO,YAMJuB,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAW1D,KAAKe,QAAQ,MAAOtG,KAAKuF,OAAO,GAI9FvF,KAAK6U,WACClF,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAW1D,KAAKe,QAAQ,MAAO,UAAU,GAGhGtG,KAAKsO,UAAUd,OAETmC,YACF3P,KAAKsE,SAASgD,UACdtH,KAAKC,OAAOgJ,WAAWd,IAAImG,UAC3B3N,EAAQwH,KAAqB,UAAdnI,KAAKuF,QAIlBoK,YACF3P,KAAKsE,SAASgD,UACdtH,KAAKC,OAAOgJ,WAAWb,QAAQkG,UAC/B3N,EAAQyH,SAAWpI,KAAKkU,WAItBvE,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWgM,QAASjV,KAAKC,OAAOsU,YAGjF5E,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWiY,MAAOlhB,KAAKyN,QAAQyT,SAGhFvR,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWkY,QAASxgB,EAAQiQ,SAIlF,QAAS,UAAW,SAASvJ,SAASrH,KAAKuF,aAEvCjB,SAASC,QAAUnE,EAAMqD,cAAc,aACjCzD,KAAKC,OAAOgJ,WAAW4E,UAI5BuT,KAAKphB,KAAKoO,MAAOpO,KAAKsE,SAASC,UAIrCvE,KAAK6U,eACG7U,KAAKuF,UACJ,YACOuK,MAAMjP,KAAKb,gBAGlB,UACK8P,MAAMjP,KAAKb,QAQ1BqhB,SAASxgB,KAAKb,gBAjERoJ,KAAK,sDAuETpJ,KAAKkU,gBAKJzP,KAAKzE,KAAKoO,MAAM7K,iBAAiB,WAAWoB,QAAQvE,EAAMgU,oBAK3DhG,MAAMtI,aAAa,MAAO9F,KAAKC,OAAOqhB,iBAKtClT,MAAMgC,YAGNV,IAAI,iCC9FX9D,2BAEarG,EAAMC,cACbpF,EAAMC,GAAGoC,OAAO+C,KACV+b,cAAchc,EAAMvF,KAAKoO,WACtB5I,IAEFpF,EAAMC,GAAGqC,MAAM8C,MACXb,QAAQ,cACT4c,cAAchc,EAAMwE,EAAKqE,MAAOoT,sBAO3ClgB,cACElB,EAAMC,GAAGK,OAAOY,IAAY,YAAaA,GAAWA,EAAMmgB,QAAQ7e,UAMjE8e,eAAe7gB,KAAKb,WAGrB2hB,QAAQ9gB,KACTb,KACA,gBAIUoU,cAAc1C,EAAKtD,SACpBA,MAAQ,KAGThO,EAAMC,GAAG+E,YAAYsM,EAAKpN,SAASgD,cAC9BhD,SAASgD,UAAU6M,gBAAgB,SAIxC,SAAU7S,MACLiE,KAAOjE,EAAMiE,KAGA,UAAdmM,EAAKnM,MAAkB,KACjBqc,EAActgB,EAAMmgB,QAAQ,GAE9B,SAAUG,GAAevgB,EAAM+b,MAAM/V,SAASua,EAAYrc,UACrDA,KAAOqc,EAAYrc,eAM/B+I,UAAY3N,EAAQkhB,MAAMnQ,EAAKnM,KAAMmM,EAAKzR,OAAOqN,QAG9CoE,EAAKnM,UACJ,UACI6I,MAAQhO,EAAMqD,cAAc,mBAGhC,UACI2K,MAAQhO,EAAMqD,cAAc,mBAGhC,cACA,UACI2K,MAAQhO,EAAMqD,cAAc,SAC5Bma,QAAUtc,EAAMmgB,QAAQ,GAAG/d,MAQnCY,SAASgD,UAAUnC,YAAYuM,EAAKtD,OAGrChO,EAAMC,GAAGsK,QAAQrJ,EAAMiT,cAClBtU,OAAOsU,SAAWjT,EAAMiT,UAI7B7C,EAAKwC,UACDxC,EAAKzR,OAAO6hB,eACP1T,MAAMtI,aAAa,cAAe,IAEvC4L,EAAKzR,OAAOsU,YACPnG,MAAMtI,aAAa,WAAY,IAEpC,WAAYxE,KACP8M,MAAMtI,aAAa,SAAUxE,EAAMygB,QAExCrQ,EAAKzR,OAAOoT,KAAKrJ,UACZoE,MAAMtI,aAAa,OAAQ,IAEhC4L,EAAKzR,OAAOuS,SACPpE,MAAMtI,aAAa,QAAS,IAEjC4L,EAAKzR,OAAOqN,UACPc,MAAMtI,aAAa,cAAe,OAKzC6J,YACF+B,EAAKpN,SAASgD,UACdoK,EAAKzR,OAAOgJ,WAAWX,SAAS0B,OAChC0H,EAAKpD,UAAUd,IAAMkE,EAAKpJ,SAAS1H,WAGpCohB,aAAanhB,QAGZ6Q,EAAKwC,WACE+N,eAAephB,OAAW,SAAUS,EAAMmgB,WAIhDxhB,OAAO0U,MAAQrT,EAAMqT,QAGpB7E,MAAMjP,QAGR6Q,EAAKwC,UAED,WAAY5S,KACL2gB,eAAephB,OAAW,QAASS,EAAM6Y,UAI/C/L,MAAMgC,SAIXsB,EAAKwC,SAAYxC,EAAKmD,UAAYnD,EAAKpD,UAAUd,OAE9CyS,MAAMpf,UAGjB,SA9HKuI,KAAK,2wCCPlB8Y,KACG,IACA,gCAKS5c,EAAQoF,gCACX0K,eACAd,OAAQ,OAGRlG,MAAQ9I,EAGTlF,EAAMC,GAAGoC,OAAOzC,KAAKoO,cAChBA,MAAQrL,SAASQ,iBAAiBvD,KAAKoO,SAK3CvO,OAAOsiB,QAAUniB,KAAKoO,iBAAiB+T,QACxC/hB,EAAMC,GAAGsC,SAAS3C,KAAKoO,QACvBhO,EAAMC,GAAGqC,MAAM1C,KAAKoO,eAGfA,MAAQpO,KAAKoO,MAAM,SAIvBnO,OAASG,EAAMU,UAEhBG,EACAyJ,EACC,sBAEcnK,KAAKC,MAAMuJ,EAAKqE,MAAM/C,aAAa,cAC5C,MAAOhH,UACE,MAJd,SAUAC,oBACU,gEAMD,gCAIA,WAKTgE,kBACQ,YACD,kBACM,WAIbC,oBACO,QAIPmC,mCAMAgF,IAAM,kBACNtG,KAAO,kBACPD,MAAQ,aACTnJ,KAAKC,OAAOmiB,OAAS,YAAaviB,cAC7B6P,IAAM2S,QAAQ3S,SACdtG,KAAOiZ,QAAQjZ,UACfD,MAAQkZ,QAAQlZ,WAChBuG,IAAI,2BAIRA,IAAI,SAAU1P,KAAKC,aACnByP,IAAI,UAAW/O,GAGD,OAAfX,KAAKoO,QAAkBhO,EAAMC,GAAGyB,UAAU9B,KAAKoO,QAAWhO,EAAMC,GAAG+E,YAAYpF,KAAKoO,UAMpFpO,KAAKoO,MAAMkU,UACNlZ,KAAK,gCAKTpJ,KAAKC,OAAOW,WAOZD,EAAQkhB,QAAQtU,UAMhBjJ,SAASie,SAAWviB,KAAKoO,MAAMrJ,WAAU,OAIxCQ,EAAOvF,KAAKoO,MAAMoU,QAAQpP,qBAGxB7N,OAGC,cACIA,KAAOvF,KAAKoO,MAAM/C,aAAa,kBAC/BuS,QAAU5d,KAAKoO,MAAM/C,aAAa,iBAEnCjL,EAAMC,GAAGC,MAAMN,KAAKuF,uBACf4D,MAAM,uCAIX/I,EAAMC,GAAGC,MAAMN,KAAK4d,0BACfzU,MAAM,uCAKViF,MAAM+F,gBAAgB,kBACtB/F,MAAM+F,gBAAgB,2BAG1B,YACA,aACI5O,KAAOA,EAEmC,OAA3CvF,KAAKoO,MAAM/C,aAAa,sBACnBpL,OAAO6hB,aAAc,GAEc,OAAxC9hB,KAAKoO,MAAM/C,aAAa,mBACnBpL,OAAOsU,UAAW,GAEoB,OAA3CvU,KAAKoO,MAAM/C,aAAa,sBACnBpL,OAAOqN,QAAS,GAEgB,OAArCtN,KAAKoO,MAAM/C,aAAa,gBACnBpL,OAAOuS,OAAQ,GAEgB,OAApCxS,KAAKoO,MAAM/C,aAAa,eACnBpL,OAAOoT,KAAKrJ,QAAS,kCAKzBb,MAAM,uCAKdsE,QAAUrN,EAAMsN,eAGboC,MAAMjP,KAAKb,WAGdsO,UAAY3N,EAAQkhB,MAAM7hB,KAAKuF,KAAMvF,KAAKC,OAAOqN,QAGjDtN,KAAKsO,UAAUf,UAMfa,MAAMkU,KAAOtiB,UAGbsE,SAASgD,UAAYlH,EAAMqD,cAAc,SACxC2d,KAAKphB,KAAKoO,MAAOpO,KAAKsE,SAASgD,gBAGhChD,SAASgD,UAAUxB,aAAa,WAAY,KAG9Ckc,aAAanhB,KAAKb,QAGf8P,MAAMjP,KAAKb,MAGbA,KAAKC,OAAOmiB,SACNxY,GAAG5J,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOwK,OAAO2B,KAAK,KAAM,cACvDsD,cAAc7F,EAAMtE,SAM7BvF,KAAKkU,SAAYlU,KAAK6U,UAAY7U,KAAKsO,UAAUd,OAC9CyS,MAAMpf,KAAKb,YA9BTmJ,MAAM,sCAvENA,MAAM,sCAPNA,MAAM,8CAZNA,MAAM,2FAwIX,SAAUnJ,KAAKoO,YACVA,MAAMvG,OAIR7H,2CAKH,UAAWA,KAAKoO,YACXA,MAAMtG,QAIR9H,wCAIA4G,UAEDxG,EAAMC,GAAGsK,QAAQ/D,IAAW5G,KAAKoO,MAAMyC,QAAWjK,EAC7C5G,KAAK6H,OAGT7H,KAAK8H,8CAKL9H,KAAK+H,UAAUD,sDAKjBiB,YAAc,EACZ/I,oCAIJyc,eACE1T,YAAc/I,KAAK+I,aAAe3I,EAAMC,GAAG4L,OAAOwQ,GAAYA,EAAWzc,KAAKC,OAAOwc,UACnFzc,qCAIHyc,eACC1T,YAAc/I,KAAK+I,aAAe3I,EAAMC,GAAG4L,OAAOwQ,GAAYA,EAAWzc,KAAKC,OAAOwc,UACnFzc,4CAqFIyiB,OACL9Z,EAAS3I,KAAKoO,MAAMoE,MAAQ,EAAIxS,KAAKoO,MAAMzF,cAE1C3I,KAAKwf,UAAU7W,EAASvI,EAAMC,GAAG4L,OAAOwW,GAAQA,EAAO,0CAInDA,OACL9Z,EAAS3I,KAAKoO,MAAMoE,MAAQ,EAAIxS,KAAKoO,MAAMzF,cAE1C3I,KAAKwf,UAAU7W,EAASvI,EAAMC,GAAG4L,OAAOwW,GAAQA,EAAO,0CAyKnDnhB,OAENtB,KAAKsO,UAAUd,KAAOpN,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASqD,QAAQW,iBAC3DtI,SAIL6a,EAAOza,EAAMC,GAAGsK,QAAQrJ,GACxBA,GACuF,IAAvFtB,KAAKsE,SAASgD,UAAUjB,UAAUwQ,QAAQ7W,KAAKC,OAAOgJ,WAAWX,SAAS0B,eAG5EhK,KAAKsI,SAAS1H,UAAYia,EACnB7a,WAINsI,SAAS1H,QAAUia,IAGlBjL,YAAY5P,KAAKsE,SAASqD,QAAQW,SAAUtI,KAAKsI,SAAS1H,WAG1D+O,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWX,SAAS0B,OAAQhK,KAAKsI,SAAS1H,WAG3FsK,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAOpO,KAAKsI,SAAS1H,QAAU,kBAAoB,oBAGhFZ,+CAwCM6J,MAETtB,EAAW3H,QAAS,KAEhBR,EAAMC,GAAGwJ,MAAMA,IAAUA,EAAMtE,OAASgD,EAAWyL,iBAI9ChU,KAAKuI,WAAWyB,SAKN4E,qBAHAU,kBAAkBtP,KAAKsE,SAASgD,gBAO1CiB,WAAWyB,OAASzB,EAAWma,aAAa1iB,KAAKsE,SAASgD,WAExDtH,UAdFuI,WAAWyB,OAASzB,EAAWma,aAAa1iB,KAAKsE,SAASgD,qBAkB9DiB,WAAWyB,QAAUhK,KAAKuI,WAAWyB,SAGpC2F,YACF3P,KAAKsE,SAASgD,UACdtH,KAAKC,OAAOgJ,WAAWV,WAAWiH,SAClCxP,KAAKuI,WAAWyB,QAIhBhK,KAAKuI,WAAWyB,YAETnK,OAAO8iB,aAAe,IACtB9iB,OAAO+iB,aAAe,UAGtBC,SAASX,EAAeY,EAAGZ,EAAea,YAI5CvZ,KAAKtG,MAAM8f,SAAWhjB,KAAKuI,WAAWyB,OAAS,SAAW,UAInEhK,KAAKsE,SAASqD,SAAW3H,KAAKsE,SAASqD,QAAQY,cACzCqH,YAAY5P,KAAKsE,SAASqD,QAAQY,WAAYvI,KAAKuI,WAAWyB,UAIlEkB,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAOpO,KAAKuI,WAAWyB,OAAS,kBAAoB,kBAEjFhK,8CAoCFW,EAAQyH,cAKRgG,MAAM6U,iCAEJjjB,MANIA,4CAUA4G,cACLyX,EAASre,SAGVI,EAAMC,GAAG+E,YAAYpF,KAAKsE,SAASkD,iBAC7B6W,MAINre,KAAKsO,UAAUd,KAAOxN,KAAKC,OAAO0Q,cAA8B,UAAd3Q,KAAKuF,YACjD8Y,MAGP6E,EAAQ,EACRrI,EAAOjU,EACPuc,GAAoB,EAClBhO,EAAU/U,EAAM0Y,SAAS9Y,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAWkM,YAG1E/U,EAAMC,GAAGsK,QAAQ/D,KACdxG,EAAMC,GAAGwJ,MAAMjD,MAEqB,oBAAhBA,EAAOrB,QAGnB,YAAa,aAAc,aAAc,SAAS8B,SAAST,EAAOrB,OAGrE,YAAa,aAAa8B,SAAST,EAAOrB,UACnC,KAIQ,UAAhBqB,EAAOrB,SACC,QAGLnF,EAAM0Y,SAAS9Y,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAW0H,sBAKvEyS,aAAapjB,KAAKoV,OAAO1B,OAG5BmH,GAAQ7a,KAAKoO,MAAMyC,QAAUsE,EAAS,IAEtB/U,EAAMuP,YAAY3P,KAAKsE,SAASgD,UAAWtH,KAAKC,OAAOgJ,WAAW0H,cAAc,MAItFzF,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAO,iBAI3CpO,KAAKoO,MAAMyC,QAAUsE,SACdkJ,EAIP1d,EAAQiQ,UACA,YAMXiK,GAAS7a,KAAKoO,MAAMyC,cAChBuE,OAAO1B,MAAQ7T,OAAOkT,WAAW,aAE7BrB,EAAKpN,SAASkD,SAASyK,UAAWP,EAAKpN,SAASkD,SAASkM,OAAWyP,IAKzD/iB,EAAMuP,YAAY+B,EAAKpN,SAASgD,UAAWoK,EAAKzR,OAAOgJ,WAAW0H,cAAc,OAItFzF,cAAcrK,OAAW6Q,EAAKtD,MAAO,kBAEvCsD,EAAKzR,OAAOuH,SAASH,SAAS,cAAgBjH,EAAMC,GAAGC,MAAMoR,EAAKzR,OAAOoI,aAChE4K,WAAWpS,QAAW,KAGxCqiB,IAGAljB,gCAIR6J,EAAOO,YACAR,GAAG5J,KAAKsE,SAASgD,UAAWuC,EAAOO,GAElCpK,iCAGP6J,EAAOO,YACD0R,IAAI9b,KAAKsE,SAASgD,UAAWuC,EAAOO,GAEnCpK,sCAIFuF,UACE5E,EAAQ0iB,KAAKxiB,KAAKb,KAAMuF,mCAM3B6E,cAAUkZ,0DACRC,EAAO,uBAEA/Z,KAAKtG,MAAM8f,SAAW,KAG1B5F,MAAQ,KAGTkG,IACMlP,cAAcsG,EAAKpW,SAASgE,YAC5B8L,cAAcsG,EAAKpW,SAASkD,YAC5B4M,cAAcsG,EAAKpW,SAASC,WAG7BD,SAASgE,SAAW,OACpBhE,SAASkD,SAAW,OACpBlD,SAASC,QAAU,KAGpBnE,EAAMC,GAAG4N,SAAS7D,YAGnB,KAEGpF,EAAS0V,EAAKpW,SAASgD,UAAUzD,WAEnCzD,EAAMC,GAAG+E,YAAYJ,MACdwe,aAAa9I,EAAKpW,SAASie,SAAU7H,EAAKpW,SAASgD,aAIxD4D,cAAcrK,OAAW6Z,EAAKpW,SAASie,SAAU,aAAa,GAGhEniB,EAAMC,GAAG4N,SAAS7D,MACTvJ,KAAK6Z,EAAKpW,SAASie,YAI3Bje,SAAW,cAKhBtE,KAAKuF,UACJ,iBAEMqa,cAAc5f,KAAKoV,OAAOyK,kBAC1BD,cAAc5f,KAAKoV,OAAOJ,cAG5BoI,MAAMuE,wBAOV,aAGIvE,MAAMqG,SAAS7C,KAAK2C,UAGlBxQ,WAAWwQ,EAAM,eAIvB,YACA,UAEEla,qBAAqBxI,KAAKb,MAAM,+CAlqBpCqB,EAAMqiB,MAAMrc,SAASrH,KAAKuF,6CAG1BlE,EAAM+b,MAAM/V,SAASrH,KAAKuF,wCA0DrBjE,OACRqiB,EAAa,EAEbvjB,EAAMC,GAAG4L,OAAO3K,OACHA,GAIbqiB,EAAa,IACA,EACNA,EAAa3jB,KAAK8I,aACZ9I,KAAK8I,eAIjBsF,MAAMrF,YAAc4a,EAAWnY,QAAQ,QAGvCkE,kBAAkB1P,KAAK+I,+CAIrBtH,OAAOzB,KAAKoO,MAAMrF,kDAMnB6a,EAAehO,SAAS5V,KAAKC,OAAO6I,SAAU,IAG9C+a,EAAepiB,OAAOzB,KAAKoO,MAAMtF,iBAG/BrH,OAAOC,MAAMkiB,GAA+BC,EAAfD,+BAI9Bpd,OACHmC,EAASnC,EAITpG,EAAMC,GAAGoC,OAAOkG,OACPlH,OAAOkH,IAIfvI,EAAMC,GAAG4L,OAAOtD,OACHzI,EAAQP,IAAIkB,KAAKb,MAA5B2I,QAIFvI,EAAMC,GAAG4L,OAAOtD,OACH3I,KAAKC,OAAhB0I,QAIHA,EAlBQ,MAAA,GAsBRA,EArBQ,MAAA,QA0BPyF,MAAMzF,OAASA,EAGL,IAAXA,SACK6J,OAAQ,0BAKVxS,KAAKoO,MAAMzF,mCAkBZT,OAEAtB,EAASxG,EAAMC,GAAGsK,QAAQzC,GAAQA,GAAQlI,KAAKoO,MAAMoE,QAGrD5C,YAAY5P,KAAKsE,SAASqD,QAAQO,KAAMtB,QAGzCwH,MAAMoE,MAAQ5L,yBAIZ5G,KAAKoO,MAAMoE,kCAIZlR,OAEF2P,EAAQ7Q,EAAMC,GAAG4L,OAAO3K,GACtBA,EACAyO,WAAW7P,EAAQP,IAAIkB,KAAKb,MAAMiR,OAASjR,KAAKiR,MAAM6S,UAAY9jB,KAAKC,OAAOgR,MAAM8I,SAGtF9I,EAAQ,OACA,IAERA,EAAQ,MACA,GAGPjR,KAAKC,OAAOgR,MAAMvG,QAAQrD,SAAS4J,QAMnC7C,MAAMwQ,aAAe3N,OALjB7H,2BAA2B6H,8BAS7BjR,KAAKoO,MAAMwQ,2CAIVtd,OAEF4P,EAAU9Q,EAAMC,GAAGoC,OAAOnB,GAC1BA,EACAyO,WAAW7P,EAAQP,IAAIkB,KAAKb,MAAMkR,SAAWlR,KAAKC,OAAOiR,QAAQ4S,aAElE9jB,KAAKC,OAAOiR,QAAQxG,QAAQrD,SAAS6J,UAMlClR,KAAKuF,UACJ,eACInF,MAAM8K,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAO,oBAAoB,oBAI/DgP,MAAM2G,mBAAmB7S,sBAKzB9H,KAAK,4DAhBTA,oCAAoC8H,8BAuBrClR,KAAKuF,UACJ,iBACMvF,KAAKod,MAAMuB,yCAGbvV,KAAK,kDACH,gCAwDX9H,KACG0iB,OAAOnjB,KAAKb,KAAMsB,0BAIlBtB,KAAKoO,MAAMuS,wCAIXrf,GACW,UAAdtB,KAAKuF,KAKLnF,EAAMC,GAAGoC,OAAOnB,SACX8M,MAAMtI,aAAa,SAAUxE,QAL7B8H,KAAK,+DAUI,UAAdpJ,KAAKuF,KACE,KAGJvF,KAAKoO,MAAM/C,aAAa,yCAqCtB/J,MAEJlB,EAAMC,GAAGoC,OAAOnB,QAKfH,EAAWG,EAAM8R,cAGnBpT,KAAKsI,SAASnH,WAAaA,SAK1BuR,gBAAe,QAGfpK,SAASnH,SAAWA,IAGnB+J,cAAcrK,KAAKb,KAAMA,KAAKoO,MAAO,mBAGlC3N,IAAII,KAAKb,QAGT8P,MAAMjP,KAAKb,+BAIbA,KAAKsI,SAASnH,mCAiEjBG,OACE2iB,OACG,4BACG,aAIPtjB,EAAQwH,SAKPvB,EAASxG,EAAMC,GAAGsK,QAAQrJ,GAASA,EAAQtB,KAAKmI,MAAQ8b,EAAO3W,YAGhEc,MAAMF,0BAA0BtH,EAASqd,EAAO9b,IAAM8b,EAAO3W,gCAI7D3M,EAAQwH,IAINnI,KAAKoO,MAAM8V,uBAHP"}